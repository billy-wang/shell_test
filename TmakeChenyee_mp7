#!/bin/bash
#       DESCRIPTION:    make project 
#       SCRIPT NAME:    TmakeChenyee
#       USAGE:          build Android project.
#       AUTHOR:         Ling Fen
#       EMAIL:          lingfen@chenyee.com
#       DATE:           2013-11-19
#       HISTORY:
#           REVISION ------ DATE ------------------ MODIFICATION
#           LingFen         2013-11-19              create

Version="V1.00"
usage(){
printf "\
Usage : ./${tools_name} [Options] GBW8901A01_A  Actions
    Options:
        -l, -listp            : List the available project.
	-h, -help             : Print this message and exit.
	-t, -tee              : Print log information on the standard-out.
    Actions:
        -n, --new             : Clean and perform a full build.
        -r, --remake          : retry perform a build.
        -a, --android         : do not update-api,only build android image.
        -c, --copy_target     : copy target to release only.
        -C, --copy_chenyee    : copy chenyee code to alps dir
        -s, --sign            : sign image
    Module:
        -i, --image  <bootimage|systemimage|userdataimage|update-api|kernel|otapackage>
            :Specify image to be build/re-build (bootimage|systemimage|userdataimage|recoveryimage).
            :Specify module to be build/re-build (kernel|otapackage).
    Project:
        -p, --project  <packages/app/Email/> use mmma commad, check and build other dependency module
            :Specif Project pathdir to be build
        -P, --project  <packages/app/Email/> use mmm commad, no dependency module
            :Specif Project pathdir to be build

    编译rom项目,代码copy 顺序：
        #编译接口代码存放位置
        chenyee/alps_build                       #只有builder 才可以上传代码到这里

        #驱动相关代码存放位置
        chenyee/alps_drv                         #所有项目共用的代码
        chenyee/project/\${project}               #某个项目共用的代码
        chenyee/project/\${product}               #某个产品代码

        #rom相关代码存放位置
        chenyee/alps                             #所有项目共用的代码
        chenyee/alps_oversea                     #所有海外项目共用的代码
        chenyee/project/\${project}_alps          #某个项目共用的代码
        chenyee/project/\${product}_alps          #某个产品代码

    编译cta/platform项目,代码copy 顺序：
        #编译接口代码存放位置
        chenyee/alps_build                       #只有builder 才可以上传代码到这里

        #驱动相关代码存放位置
        chenyee/alps_drv                         #所有项目共用的代码
        chenyee/project/\${project}               #某个项目共用的代码
        chenyee/project/\${product}               #某个产品代码

        #cta/platform 相关代码存放位置
        chenyee/alps_cta|chenyee/alps_platform   #所有项目共用的代码
        chenyee/project/\${product}_alps          #某个产品代码

    编译stock原生项目,代码copy 顺序：
        #编译接口代码存放位置
        chenyee/alps_build                       #只有builder 才可以上传代码到这里

        #驱动相关代码存放位置
        chenyee/alps_drv                         #所有项目共用的代码
        chenyee/project/\${project}               #某个项目共用的代码
        chenyee/project/\${product}               #某个产品代码

        #stock 相关代码存放位置
        chenyee/alps_oversea_stock               #所有海外原生项目共用的代码
        chenyee/project/\${project}_alps          #某个项目共用的代码
        chenyee/project/\${product}_alps          #某个产品代码

    Example:
	  ./${tools_name} -l
	      : 列出可编译的产品id
	  ./${tools_name} [-v <user|eng|userdebug>] GBW8901A01_A <-n|--new>
	      : 编译产品 GBW8901A01_A 的user or eng or userdebug 版本
	  ./${tools_name} GBW8901A01_A -i <bootimage|systemimage|bootimage>
	      : 编译产品GBW8901A01_A 的bootimage | systemimage | bootimage. 还可以是kernel,otapackage等模块
	  ./${tools_name} GBW8901A01_A -p package/app/Email
	      : 编译产品GBW8901A01_A的一个apk.还可是以framework.jar等project.\n
"
}

# call this function for error processing, so the build server can recognize the failed job.
error(){
    local ret="$1";shift
    local info="$@"
    if [ "$ret" -ne 0 ];then
        echo -e "\033[31m[${FUNCNAME[1]}: "`caller 0 | cut -d " " -f 1`"] Error $ret: $info\033[0m" >&2
        echo "*********************************************************************************"
        echo "************************build error check keywords begin　************************"
        grep -rn -E "^ERROR\: |^FATAL\: |^FAILED\: |^FAILED\: |^Error\:|\: \*\*\* |\: error\: " ${LOGPATH}
        echo "************************ build error check keywords end 　************************"
        echo "*********************************************************************************"
        exit $ret
    fi
}

get_opts(){
    argv="$@"

    #兼容服务器编译
    local build_variant=$(expr match  "$argv" '-opt=TARGET_BUILD_VARIANT=\(\w*\)')
    if [ "$build_variant" == "user" -o "$build_variant" == "userdebug" -o  "$build_variant" == "eng" ];then
        echo "Is server built!"
        IS_SERVER_BUILD=true
        TARGET_BUILD_VARIANT=$build_variant
        shift
        echo $@
    fi

    opts=$(getopt -o cChHi:kslnp:P:rqatv:VS:f:m: \
                  --long history, \
                  --long copy_target,copy_chenyee,help,image:,key,sign,listp,new,project:, \
                  --long PROJECT:,remake,remake_billy,tee,target_build_variant:,clear_ccache,sonar:,file_script:,mp_status:,  -- "$@")
    if [ $? -ne 0 ];then
        echo "***$? ***"
        usage 
        error 1 "INVALID OPTIONS!"
    fi

    eval set -- "$opts"
    while true 
    do
        case "$1" in 
            -c|--copy_target)
                COPY_TARGET=true
                shift ;;
            -C|--copy_chenyee)
                COPY_CHENYEE=true
                shift ;;
            -i|--image)
                MODULE=$2
                shift 2 ;;
            -n|--new)
                ACTION=new
                shift ;;
            -p|--project)
                PROJECT_PATH=$2
                shift 2 ;;
            -P|--PROJECT)
                PROJECT_PATH=$2
                CMD_MMM=true 
                shift 2 ;;
            -r|--remake)
                ACTION=remake
                shift ;;
            -q|--remake_billy)
                ACTION=remake_billy
                shift ;;
            -a|--android)
                ACTION=android
                shift ;;
            -v|--target_build_variant)
                TARGET_BUILD_VARIANT=$2
                shift 2 ;;
            -V|--version)
                echo $Version
                exit 0 ;;
            -t|--tee)
                BUILD_TOOLS+=" --debug"
                shift ;;
            -l|--listp)
                perl cy_tools/listP.pl
                exit 0 ;;
            --clear_ccache)
                export CY_CLEAN_CCACHE="true"
                shift ;;
            -H|--history)
                show_build_history
                exit 0 ;;
            -k|--key)
                ACTION=key
                shift ;;
            -s|--sign)
                ACTION=sign
                shift ;;
            -S|--sonar)
                ACTION=sonar
                export CY_SONAR_CHECK_PATH="$2"
                shift 2 ;;
            -f|--file_script)
                FILE_SCRIPT="$2"
                shift 2 ;;
            -m|--mp_status)
                MP_STATUS="$2"
                shift 2 ;;
            -h|--help)
                usage
                exit 0 ;;
            --)
                shift
                break ;;
            *)
                usage
                error 1 "UNKNOWN ARGUMENTS!" ;;
        esac
    done

    if [ -z "$ACTION" -a -z "$MODULE" -a -z "$PROJECT_PATH" -a -z "$COPY_TARGET" -a -z "$COPY_CHENYEE" ];then
        usage
        error 1 "Specify action to be build/re-build!"
    fi

    CHENYEEPRODUCTID=$@ 
    if [ -z "$CHENYEEPRODUCTID" -a -e "$SPEEDUP_PATH/.build_product" ];then
        CHENYEEPRODUCTID=`cat $SPEEDUP_PATH/.build_product`
    fi
    echo "PRODUCT: $CHENYEEPRODUCTID"

    if [ ! -e "cy_project/${CHENYEEPRODUCTID:0:7}/${CHENYEEPRODUCTID}.mk" ];then
        error 2 "*********** ${CHENYEEPRODUCTID}.mk product file not exist! ***********"
    fi

    if [ -z "$TARGET_BUILD_VARIANT" ]; then
        if [ -e "$SPEEDUP_PATH/.build_variant" ];then
            TARGET_BUILD_VARIANT=`cat $SPEEDUP_PATH/.build_variant`
        else
            TARGET_BUILD_VARIANT="eng"
        fi
    fi
    echo "VARIANT: $TARGET_BUILD_VARIANT"

    
    if  [ -n "$PROJECT_PATH" -a ! -d "${PROJECT_PATH%%:*}" ];then
        error 3 "***********$PROJECT_PATH not exist ************"
    fi
}

export_variable_from(){
    local file=$1
    echo "export variable from: $file"
    if [ -e "$file" ];then

        #modify for CR01549696 begin
        if [ "$TARGET_BUILD_VARIANT" != "user" ];then
            export MTK_BUILD_ROOT=yes
        else
            sed -i '/MTK_BUILD_ROOT\s*=\s*yes/d' "$file"
        fi
        #modify for CR01549696 end

        while read line
        do
            #去掉空行，'#'开头，含有':=',不含有'='的行
            [ -z "$line" -o "${line:0:1}" == "#" ] && continue
            [ -z "$(expr match "$line" '.*\(=\).*')" ] && continue
            [ -n "$(expr match "$line" '.*\(:=\).*')" ] && continue
            [ -n "$(expr match "$line" '.*\(+=\).*')" ] && continue
            local key=$(echo ${line%=*})
            local value=$(echo ${line#*=})
            export "$key"="$value"
            echo "$key=$value" >> $CY_FEATURE_CONFIG_FILE_TMP
        done < $file
    else
        echo "$file not exist"
    fi
}

create_cy_cflags(){
    local file="$1"
    #CY_CFLAGS_CONFIG_FILE 必须绝对路径
    CY_CFLAGS_CONFIG_FILE=$CY_BUILD_ROOT_DIR/cy_project/.cy_cflags_config
    export CY_CFLAGS_CONFIG_FILE

    CY_CFLAGS="CY_CFLAGS +="
    CY_KBUILD_CFLAGS="CY_KBUILD_CFLAGS +="
    if [ -f "$1" ];then 
        mkdir -p $(dirname $CY_CFLAGS_CONFIG_FILE)
        rm -rf $CY_CFLAGS_CONFIG_FILE
        > $CY_CFLAGS_CONFIG_FILE
        while read line
        do
            [ -z "$line" -o "${line:0:1}" == "#" ] && continue;
            #约定 CONFIG CY_BSP CY_Q_BSP 开头的宏 为驱动配置宏
            [ "${line:0:6}" != "CONFIG" -a "${line:0:6}" != "CY_BSP"  -a "${line:0:8}" != "CY_Q_BSP"  ] && continue
            key=$(echo ${line%=*})
            value=$(echo ${line#*=})
            if [ "$value" == "n" -o "$value" == "no" ];then
                :
            elif [ "$value" == "y" -o "$value" == "yes" ];then 
                CY_CFLAGS+=" -D$key" 
                if [ "${line:0:6}" == "CONFIG" ];then
                    echo "$key=y" >> $CY_CFLAGS_CONFIG_FILE
                    CY_KBUILD_CFLAGS+=" -D$key"
                fi
            else 
                CY_CFLAGS+=" -D$key=$value"
            fi 
        done < <(env)
        echo $CY_CFLAGS >> $CY_CFLAGS_CONFIG_FILE
        echo $CY_KBUILD_CFLAGS>> $CY_CFLAGS_CONFIG_FILE
    fi 
}

prebuild(){
    mkdir -p $LOGPATH

    #cy_project=$CHENYEEPRODUCTID
    CHENYEEPROJECTID=${CHENYEEPRODUCTID:0:7}
    export CHENYEEPRODUCTID CHENYEEPROJECTID

    #Chenyee <taofapan> <20171110> add for replace img begin
    CY_CUSTOM_IMG_RELEASED=release/${CHENYEEPROJECTID}_${TARGET_BUILD_VARIANT}_img_released
    export CY_CUSTOM_IMG_RELEASED
    #Chenyee <taofapan> <20171110> add for replace img end

    #FIXME: not a good way to obtain TARGET_PRODUCT
    [ "${CHENYEEPRODUCTID:(-8):8}" == "platform" -o "${CHENYEEPRODUCTID:(-3):3}" == "CTA" -o "${CHENYEEPRODUCTID:(-4):4}" == "CMCC" -o "${CHENYEEPRODUCTID:(-2):2}" == "CT" ] && BUILD_OPTIONS="platform" 
    export BUILD_OPTIONS
    
    #export product.mk begin

    CY_FEATURE_CONFIG_FILE=$CY_BUILD_ROOT_DIR/cy_project/.cy_feature_config
    CY_FEATURE_CONFIG_FILE_TMP=$CY_BUILD_ROOT_DIR/cy_project/.cy_feature_config.tmp
    export CY_FEATURE_CONFIG_FILE
    export CY_FEATURE_CONFIG_FILE_TMP
    [ -e "$CY_FEATURE_CONFIG_FILE_TMP" ] && rm $CY_FEATURE_CONFIG_FILE_TMP

    export_variable_from "cy_project/${CHENYEEPROJECTID}/${CHENYEEPROJECTID}_COMMON_BSP.mk"
    if [ "${BUILD_OPTIONS}" != "platform" ];then
        export_variable_from "cy_project/${CHENYEEPROJECTID}/${CHENYEEPROJECTID}_COMMON_ROM.mk"
    fi
    export_variable_from "cy_project/${CHENYEEPROJECTID}/${CHENYEEPRODUCTID}.mk"
    
    # only generate $CY_FEATURE_CONFIG_FILE when its contents has been modified, this can speedup the remake build.
    diff <(sort $CY_FEATURE_CONFIG_FILE) <(sort $CY_FEATURE_CONFIG_FILE_TMP)
    if [ $? -ne 0 ]; then
        echo "[BUILD_DEBUG] Feature Config has been modified, regenerate the new feature config file."
        cp $CY_FEATURE_CONFIG_FILE_TMP $CY_FEATURE_CONFIG_FILE
    fi


    TARGET_PRODUCT=`grep  -w 'TARGET_PRODUCT' <(env) | sed 's/ //g' | grep '^TARGET_PRODUCT' | awk -F= '{print $2}'`
    MTK_PLATFORM=`grep  -w 'MTK_PLATFORM' <(env) | sed 's/ //g' | grep '^MTK_PLATFORM' | awk -F= '{print $2}'`
    export TARGET_PRODUCT
    #export product.mk end

    create_cy_cflags "cy_project/${CHENYEEPROJECTID}/${CHENYEEPRODUCTID}.mk"

    #Chenyee <CY_Builder> <zhouli> <20170924> modify it for 222653 begin
    #Generation kernel Kconfig
    python cy_tools/cy_auto_gen_kconfig.py $CY_FEATURE_CONFIG_FILE $CY_BUILD_ROOT_DIR
    #python cy_tools/cy_auto_gen_kconfig.py "cy_project/${CHENYEEPROJECTID}/${CHENYEEPRODUCTID}.mk" $CY_BUILD_ROOT_DIR
    #Chenyee <CY_Builder> <zhouli> <20170924> modify it for 222653 end

    #export release version begin
    [ ! -e "cy_project/${CHENYEEPROJECTID}_VerNumber" ] && echo "MINI_VER_NUMBER=T0001;">cy_project/${CHENYEEPROJECTID}_VerNumber
    . cy_project/${CHENYEEPROJECTID}_VerNumber

    [ $IS_SERVER_BUILD == "false" ] && MINI_VER_NUMBER=$MINI_VER_NUMBER"_LOCAL"

    CY_ZNVERNUMBER=${CHENYEEPRODUCTID}_${MINI_VER_NUMBER}
    export MINI_VER_NUMBER CY_ZNVERNUMBER 
    #export release version end

    #gn ro 
    if [ "$CY_RO_PRODUCT_MODEL" == "" ];then
        CY_RO_PRODUCT_MODEL=${CHENYEEPROJECTID}
    fi
    CY_INTERNAL_VER_NUMBER=${CHENYEEPRODUCTID}_V${MINI_VER_NUMBER:1:4}
    CY_EXTERNAL_VER_NUMBER=${CY_RO_PRODUCT_MODEL}_$(echo ${CY_INTERNAL_VER_NUMBER}|cut -d '_' -f 2,3)
    echo "CY_INTERNAL_VER_NUMBER=$CY_INTERNAL_VER_NUMBER"
    echo "CY_EXTERNAL_VER_NUMBER=$CY_EXTERNAL_VER_NUMBER"
    export  CY_INTERNAL_VER_NUMBER CY_EXTERNAL_VER_NUMBER
}

replace_sign_key(){
    if [ -z "${CY_WITH_CUSTOM_SIGNKEY}" -o "${CY_WITH_CUSTOM_SIGNKEY}" == "" -o "${CY_WITH_CUSTOM_SIGNKEY}" == "null" ];then
        if [ "${BUILD_OPTIONS}" == "platform" -o "${TARGET_BUILD_VARIANT}" != "user" ];then
            echo "BUILD_OPTIONS=${BUILD_OPTIONS}"
            echo "TARGET_BUILD_VARIANT=${TARGET_BUILD_VARIANT}"
        else
            CY_SIGN_KEY_FOLDER="$HOME/singkey/cykey"
            if [ "${CY_CUSTOM_SIGN_KEY}" != "" ];then
                CY_SIGN_KEY_FOLDER="$HOME/singkey/${CY_CUSTOM_SIGN_KEY}"
            fi
            if [ -d "${CY_SIGN_KEY_FOLDER}" ];then
                cp -f ${CY_SIGN_KEY_FOLDER}/* "build/make/target/product/security"
                echo "copy $CY_SIGN_KEY_FOLDER to  build/make/target/product/security"
                cp -f ${CY_SIGN_KEY_FOLDER}/* "device/mediatek/security"
                echo "copy $CY_SIGN_KEY_FOLDER to  device/mediatek/security"
            else
                echo "NO ${CY_SIGN_KEY_FOLDER}"
            fi 
        fi
    else
        CY_CUSTOM_SIGN_KEY_FOLDER="$CY_BUILD_ROOT_DIR/cy_tools/tools/singkey/$CY_WITH_CUSTOM_SIGNKEY"
        if [ -d "${CY_CUSTOM_SIGN_KEY_FOLDER}" ];then
            cp -f ${CY_CUSTOM_SIGN_KEY_FOLDER}/* "build/make/target/product/security"
            echo "copy $CY_CUSTOM_SIGN_KEY_FOLDER to  build/make/target/product/security"
            cp -f ${CY_CUSTOM_SIGN_KEY_FOLDER}/* "device/mediatek/security"
            echo "copy $CY_CUSTOM_SIGN_KEY_FOLDER to  device/mediatek/security"
        else
            echo "NO ${CY_CUSTOM_SIGN_KEY_FOLDER}"
        fi 
    fi
}

get_chenyee_code(){
    local vendor=$1
    local version=$2
    #copy chenyee dir code to alps 
    bash cy_tools/cy_prebuild.sh $vendor $version
    replace_sign_key

    #Chenyee sunll 2015-01-21 modify MTK_BUILD_VERNO=${CY_ZNVERNUMBER} begin
    CY_TARGET_PRODUCT_DIR=$(cat <(env) | grep "^\s*TARGET_PRODUCT\s*=" | sed 's/.*\s*=\s*full_//g')
    CY_PRODUCT_FILE=device/mediateksample/${CY_TARGET_PRODUCT_DIR}/ProjectConfig.mk    
    sed -i "s/^\s*MTK_BUILD_VERNO\s*=\s*.*/MTK_BUILD_VERNO=${CY_ZNVERNUMBER}/"  ${CY_PRODUCT_FILE}
    echo 'MTK_BUILD_VERNO='$(cat ${CY_PRODUCT_FILE} | grep "^\s*MTK_BUILD_VERNO" | sed 's/.*\s*=\s*//g')
    #Chenyee sunll 2015-01-21 modify MTK_BUILD_VERNO=${CY_ZNVERNUMBER} end
}

set_kernel_config(){
    #函数中未定义的变量都来源于export_variable_from中的export
    if [ "$TARGET_BUILD_VARIANT" == "eng" -a -f "$CY_KERNEL_CFG_FILE_ENG" ];then
        CY_KERNEL_CFG_FILE=$CY_KERNEL_CFG_FILE_ENG
    fi

    #Chenyee <BY_BSP_CHG> <zhouli> <20170106> add for CSW1705A-423 begin
    if [ "$TARGET_BUILD_VARIANT" != "user" ];then
        export CONFIG_I2C_CHARDEV=yes
    fi
    #Chenyee <BY_BSP_CHG> <zhouli> <20170106> add for CSW1705A-423 end

    #echo $CY_KERNEL_CFG_FILE

    if [ -f "$CY_KERNEL_CFG_FILE" ];then
        echo "*** kernel config file: $CY_KERNEL_CFG_FILE ****"
        while read line
        do
            [ -z "$line" -o "${line:0:1}" == "#" ] && continue
            local key=$(echo ${line%=*})
            local value=$(echo ${line#*=})
            [ -z "$key" -o -z "$value" ] && continue

            if ! `echo "$key" | grep -q "^CONFIG"`;then
                continue
            fi

            #echo $line

            if [ "$value" == "n" -o "$value" == "no" ];then
                if `grep -qw "$key" $CY_KERNEL_CFG_FILE` ;then
                    sed -i "/\<$key\>/c\# $key is not set" $CY_KERNEL_CFG_FILE
                else
                    echo "# $key is not set" >> $CY_KERNEL_CFG_FILE
                fi

            elif [ "$value" == "y" -o "$value" == "yes" ];then
                if `grep -qw "$key" $CY_KERNEL_CFG_FILE` ;then
                    sed -i "/\<$key\>/c\\$key=y" $CY_KERNEL_CFG_FILE
                else
                    echo "$key=y" >> $CY_KERNEL_CFG_FILE
                fi

            else
                if `grep -qw "$key" $CY_KERNEL_CFG_FILE` ;then
                    sed -i "/\<$key\>/c\\$key=$value" $CY_KERNEL_CFG_FILE
                else
                    echo "$key=$value" >> $CY_KERNEL_CFG_FILE
                fi
            fi
        done < <(env)
    else
        echo "kernel config file: $CY_KERNEL_CFG_FILE not exist"
    fi
}

get_release_version(){
    #函数中未定义的变量都来源于export_variable_from中的export
    CY_RELEASE_DIR="release/$CY_ZNVERNUMBER"
    CY_RELEASE_OTA_DIR_ROOT=${CY_RELEASE_DIR}_OTA
    CY_RELEASE_OTA_TMP_DIR=${CY_RELEASE_OTA_DIR_ROOT}/tmp
    CY_RELEASE_OTA_DIR=${CY_RELEASE_OTA_DIR_ROOT}/ota
    CY_RELEASE_MODEM_DIR="$CY_RELEASE_DIR/bp_image"
}

create_product_for_flash_tool(){
    if [ -e "./cy_tools/cy_output_product_info.sh" ];then
        bash ./cy_tools/cy_output_product_info.sh ${CHENYEEPRODUCTID} ${CY_RELEASE_DIR}
    fi
}

# Chenyee <CY_BSP_OTA_SECUREBOOT> <goudaqiang> <20170605> add for 151694 begin
copy_signed_img_to_dir(){
    echo "CHENYEE Copy_signed_img_to_dir"
    mkdir -p ./backup_img/

    cp -f release/${CY_ZNVERNUMBER}_noota/sec_boot_sig_dir/boot-verified.img ./backup_img/
    cp -f release/${CY_ZNVERNUMBER}_noota/sec_boot_sig_dir/recovery-verified.img ./backup_img/
    cp -f release/${CY_ZNVERNUMBER}_noota/sec_boot_sig_dir/trustzone.bin ./backup_img/
}
# Chenyee <CY_BSP_OTA_SECUREBOOT> <goudaqiang> <20170605> add for 151694 end

copy_results_to_release(){
    [ -d "$CY_RELEASE_DIR" ] && rm -rf $CY_RELEASE_DIR
    mkdir -p $CY_RELEASE_DIR

    PRODUCT_OUT_ROOT="out/target/product"
    CY_TARGET_PRODUCT=${TARGET_PRODUCT/full_}
    TARGET_PRODUCT_OUT_ROOT="$PRODUCT_OUT_ROOT/${CY_TARGET_PRODUCT}"

    #lihuafang modify begin
    if [ -d "${TARGET_PRODUCT_OUT_ROOT}" ];then
        cp -f ${TARGET_PRODUCT_OUT_ROOT}/*.img $CY_RELEASE_DIR/;
        cp -f ${TARGET_PRODUCT_OUT_ROOT}/*.bin $CY_RELEASE_DIR/;
        cp -f ${TARGET_PRODUCT_OUT_ROOT}/*.mbn $CY_RELEASE_DIR/;
        cp -f ${TARGET_PRODUCT_OUT_ROOT}/*.txt $CY_RELEASE_DIR/;
        cp -f ${TARGET_PRODUCT_OUT_ROOT}/EBR1 $CY_RELEASE_DIR/;
        cp -f ${TARGET_PRODUCT_OUT_ROOT}/EBR2 $CY_RELEASE_DIR/;
        cp -f ${TARGET_PRODUCT_OUT_ROOT}/MBR $CY_RELEASE_DIR/;
        rm $CY_RELEASE_DIR/preloader.bin
        rm $CY_RELEASE_DIR/preloader.img
    else
        echo "Wanning: ${TARGET_PRODUCT_OUT_ROOT} does no exist"
    fi
    #lihuafang modify end
# Chenyee <CY_BSP_OTA_SECUREBOOT> <goudaqiang> <20170605> add for 151694 begin
    if [ -d "release/${CY_ZNVERNUMBER}_noota" ];then
        cp -f release/${CY_ZNVERNUMBER}_noota/boot.img $CY_RELEASE_DIR/
        cp -f release/${CY_ZNVERNUMBER}_noota/recovery.img $CY_RELEASE_DIR/
        cp -f release/${CY_ZNVERNUMBER}_noota/trustzone.bin $CY_RELEASE_DIR/
        rm $CY_RELEASE_DIR/boot-verified.img
        rm $CY_RELEASE_DIR/recovery-verified.img
        rm -rf ./backup_img/
	    echo "Chenyee rm boot-verified.img and recovery-verified.img"
    else
	    echo "Chenyee Deafult KEY"
    fi
# Chenyee <CY_BSP_OTA_SECUREBOOT> <goudaqiang> <20170605> add for 151694 begin
    #chenyee, chuqf, for tee raw imgs, begin
    cp -f ${TARGET_PRODUCT_OUT_ROOT}/trustzone/bin/*pad\.img $CY_RELEASE_DIR/
    if [ -f $CY_RELEASE_DIR/mt6735_microtrust_release_pad.img ];then
        cp $CY_RELEASE_DIR/mt6735_microtrust_release_pad.img $CY_RELEASE_DIR/mt6735_tee_microtrust_release_pad.img
        mkdir $CY_RELEASE_DIR/cy_secure_boot_configs
	    echo "0x1900000" > $CY_RELEASE_DIR/cy_secure_boot_configs/SECURE_DRAM_SIZE_CFG.ini
    fi
    if [ -f $CY_RELEASE_DIR/mt6735_microtrust_debug_pad.img ];then
        cp $CY_RELEASE_DIR/mt6735_microtrust_debug_pad.img $CY_RELEASE_DIR/mt6735_tee_microtrust_release_pad.img
        mkdir $CY_RELEASE_DIR/cy_secure_boot_configs
	    echo "0x1900000" > $CY_RELEASE_DIR/cy_secure_boot_configs/SECURE_DRAM_SIZE_CFG.ini
    fi
    #chenyee, chuqf, for tee raw imgs, end

    #copy DbgInfo file
    local dbginfo_file=$(find $TARGET_PRODUCT_OUT_ROOT/obj/ETC -type f -name "DbgInfo*" 2>/dev/null )
    if [ -f "$dbginfo_file"  ];then
        cp -r $dbginfo_file $CY_RELEASE_DIR/
    fi

    #copy BPLGUInfo file
    local bplguinfo_file=$(find $TARGET_PRODUCT_OUT_ROOT/obj/ETC -type f -name "BPLGUInfo*" 2>/dev/null )
    for eachbplgui in $bplguinfo_file
    do
      if [ -f "$eachbplgui"  ];then
        cp -r $eachbplgui $CY_RELEASE_DIR/
      fi
    done

    #copy MDDB file
    local bpl_file=$(find $TARGET_PRODUCT_OUT_ROOT/obj/ETC -type f -name "MDDB_*" 2>/dev/null )
    if [ -f "$bpl_file"  ];then
        cp -r $bpl_file $CY_RELEASE_DIR/
    fi

    #copy modem files
    find $TARGET_PRODUCT_OUT_ROOT/obj -type f -name "APDB*" -exec cp \{} $CY_RELEASE_DIR \;
    find $TARGET_PRODUCT_OUT_ROOT/system/etc/mddb -type f -name "BP*" -exec cp \{} $CY_RELEASE_DIR \;

    #copy symbols to cy_backup
    if [ -d "$TARGET_PRODUCT_OUT_ROOT/symbols" ];then
        mkdir -p $PRODUCT_OUT_ROOT/chenyee_backup/
        rsync -avq "$TARGET_PRODUCT_OUT_ROOT/symbols" "$PRODUCT_OUT_ROOT/chenyee_backup/"
        find $TARGET_PRODUCT_OUT_ROOT -type f -name "*.elf" |cpio -dup --quiet $PRODUCT_OUT_ROOT/chenyee_backup 
        find $TARGET_PRODUCT_OUT_ROOT/obj/BOOTLOADER_OBJ -type f -name "lk" | cpio -dup --quiet $PRODUCT_OUT_ROOT/chenyee_backup
        find $TARGET_PRODUCT_OUT_ROOT/obj -type f -name "System.map" | cpio -dup --quiet $PRODUCT_OUT_ROOT/chenyee_backup 

        #lk 
        cp -r $TARGET_PRODUCT_OUT_ROOT/obj/BOOTLOADER_OBJ/build-*/lk   "$PRODUCT_OUT_ROOT/chenyee_backup/" 2>/dev/null
    fi
    
    #copy vmlinux for debug
    if [ -f "$TARGET_PRODUCT_OUT_ROOT/obj/KERNEL_OBJ/vmlinux" ];then
        cp "$TARGET_PRODUCT_OUT_ROOT/obj/KERNEL_OBJ/vmlinux" "$CY_RELEASE_DIR"
    fi

    #copy qcn
    if [ -f "./chenyee/project/${CHENYEEPRODUCTID}/${CHENYEEPRODUCTID}.qcn" ];then
       cp "./chenyee/project/${CHENYEEPRODUCTID}/${CHENYEEPRODUCTID}.qcn" "$CY_RELEASE_DIR"
    fi

    #chenyee, chuqf, for fat.img, begin 
    if [[ -e cy_tools/gen_fat.sh ]]; then
        chmod +x cy_tools/gen_fat.sh
        ./cy_tools/gen_fat.sh ${MTK_PLATFORM} ${CHENYEEPRODUCTID} ${CY_TARGET_PRODUCT} ${TARGET_PRODUCT_OUT_ROOT}
    fi
    #chenyee, chuqf, for fat.img, end

    create_product_for_flash_tool

    local ota_zip=$(find ${TARGET_PRODUCT_OUT_ROOT}/ -maxdepth 1 -type f -name ${TARGET_PRODUCT}-ota-*.zip | sort -r | head -n 1  2>/dev/null)
    local ota_tmp_zip=$(find ${TARGET_PRODUCT_OUT_ROOT}/obj/PACKAGING/target_files_intermediates/ \
        -maxdepth 1 -type f -name ${TARGET_PRODUCT}-target_files-*.zip | sort -r | head -n 1 2>/dev/null)
    if [ -f "$ota_zip" ];then
        rm -rf $CY_RELEASE_OTA_DIR_ROOT
        mkdir -p $CY_RELEASE_OTA_TMP_DIR
        mkdir -p $CY_RELEASE_OTA_DIR
        CY_RO_BUILD_DISPLAY_ID_TMP=$(echo ${CY_RO_BUILD_DISPLAY_ID})
        CY_RO_BUILD_DISPLAY_ID_TMP=`echo ${CY_RO_BUILD_DISPLAY_ID_TMP} | sed 's/ /_/'`
        cp -r $ota_zip $CY_RELEASE_OTA_DIR/${CHENYEEPRODUCTID}_update_${CY_RO_BUILD_DISPLAY_ID_TMP}_${MINI_VER_NUMBER}.zip
        local ota_md5=$(md5sum $CY_RELEASE_OTA_DIR/${CHENYEEPRODUCTID}_update_${CY_RO_BUILD_DISPLAY_ID_TMP}_${MINI_VER_NUMBER}.zip |awk '{print $1}')
        echo "${CHENYEEPRODUCTID}_update_${CY_RO_BUILD_DISPLAY_ID_TMP}_${MINI_VER_NUMBER}.zip=$ota_md5" > $CY_RELEASE_OTA_DIR/${CHENYEEPRODUCTID}_${MINI_VER_NUMBER}.md5
        cp -r $ota_tmp_zip $CY_RELEASE_OTA_TMP_DIR/${CHENYEEPRODUCTID}_update_${CY_RO_BUILD_DISPLAY_ID_TMP}_${MINI_VER_NUMBER}_tmp.zip
        #Chenyee <CY_3rd> <lucy> <20180306> for CSW1703MX-9 beign
        if [ "${ADUPS_FOTA_SUPPORT}" == "yes" ];then
            if [ "${ADUPS_FOTA_SIGINATURE}" == "yes" ];then
                mkdir -p ${CY_RELEASE_OTA_DIR_ROOT}/3rd
                cp -f ${TARGET_PRODUCT_OUT_ROOT}/target_files-package.zip ${CY_RELEASE_OTA_DIR_ROOT}/3rd/;
            else
                cp -f ${TARGET_PRODUCT_OUT_ROOT}/target_files-package.zip $CY_RELEASE_OTA_DIR/;
            fi           
        fi
        #Chenyee <CY_3rd> <lucy> <20180306> for CSW1703MX-9 end
        #Chenyee <CY_3rd> <lucy> <20180808> for CSW1802IC-35 beign
        if [ "${REDSTONE_FOTA_SUPPORT}" == "yes" ];then
                mkdir -p ${CY_RELEASE_OTA_DIR_ROOT}/3rd
                cp -f ${TARGET_PRODUCT_OUT_ROOT}/rsfota_target_files-package.zip ${CY_RELEASE_OTA_DIR_ROOT}/3rd/;
                #cp -f ${TARGET_PRODUCT_OUT_ROOT}/target_files-package.zip $CY_RELEASE_OTA_DIR/;           
        fi
        #Chenyee <CY_3rd> <lucy> <20180808> for CSW1802IC-35 end
    fi
    if [ ! -e "$TARGET_PRODUCT_OUT_ROOT/system.img" ];then
        echo "你的编译结果不完全，请查看是否编译成功。"
        error 1 "copy results to release"
    fi

    if [ -f cy_tools/verified_boot_tools/GenEfuseImg.py ];then
        chmod +x cy_tools/verified_boot_tools/GenEfuseImg.py
	    ./cy_tools/verified_boot_tools/GenEfuseImg.py $CY_RELEASE_DIR $CHENYEEPROJECTID
    fi

    #Chenyee <taofapan> <20171110> add for replace img begin
    if [ "${CY_BUILD_WITH_CHENYEE_RELEASED}" == "yes" ];then
        rm -rf release/${CHENYEEPROJECTID}_user_img_released
        rm -rf release/${CHENYEEPROJECTID}_userdebug_img_released
        rm -rf release/${CHENYEEPROJECTID}_eng_img_released
    fi
    #Chenyee <taofapan> <20171110> add for replace img end
}

build_clean(){
    echo "*** $BUILD_TOOLS --build_variant $TARGET_BUILD_VARIANT --clean_build $TARGET_PRODUCT --log_file $LOGPATH/$TARGET_PRODUCT-clean ***"
    $BUILD_TOOLS --build_variant $TARGET_BUILD_VARIANT --clean_build $TARGET_PRODUCT --log_file $LOGPATH/$TARGET_PRODUCT-clean
    error "$?" "*********** build_clean *************"
}

build_update_api(){
    echo "*** $BUILD_TOOLS  --build_variant $TARGET_BUILD_VARIANT --update-api $TARGET_PRODUCT --log_file $LOGPATH/$TARGET_PRODUCT-update-api***"
    $BUILD_TOOLS  --build_variant $TARGET_BUILD_VARIANT --update-api $TARGET_PRODUCT --log_file $LOGPATH/$TARGET_PRODUCT-update-api
    error "$?" "*********** build_update_api ************"
}

# Chenyee <CY_BSP_OTA_SECUREBOOT> <goudaqiang> <20170605> add for 151694 begin
build_module(){
    speedup_set_state "modified"
    local image=$1
    set_kernel_config
    if `echo  "systemimage bootimage userdataimage" | grep -qw "$image" `;then
        $BUILD_TOOLS --build_variant $TARGET_BUILD_VARIANT --image $image  $TARGET_PRODUCT --log_file $LOGPATH/$TARGET_PRODUCT-$image  
    else
	if [ "$image" == "otapackage" ];then
	    if [ -d "release/${CY_ZNVERNUMBER}_noota" ];then
            	copy_signed_img_to_dir
	    else
		echo "Chenyee Deafult OTA KEY"
	    fi
        fi
        $BUILD_TOOLS --build_variant $TARGET_BUILD_VARIANT --module $image  $TARGET_PRODUCT --log_file $LOGPATH/$TARGET_PRODUCT-$image  --debug
    fi
    error "$?" "************ build_$image ************"
}
# Chenyee <CY_BSP_OTA_SECUREBOOT> <goudaqiang> <20170605> add for 151694 end

build_android(){
    echo "*** $BUILD_TOOLS --build_variant $TARGET_BUILD_VARIANT --android_build $TARGET_PRODUCT --log_file $LOGPATH/$TARGET_PRODUCT-android"
    $BUILD_TOOLS --build_variant $TARGET_BUILD_VARIANT --android_build $TARGET_PRODUCT --log_file $LOGPATH/$TARGET_PRODUCT-android
    error "$?" "************ build_android ************"
}

config_verified_boot(){
    echo "set verified boot"
    chmod +x cy_tools/verified_boot_tools/cfg_vb.py
    ./cy_tools/verified_boot_tools/cfg_vb.py "cy_project/${CHENYEEPROJECTID}/${CHENYEEPRODUCTID}.mk"
    echo "cy_project/${CHENYEEPROJECTID}/${CHENYEEPRODUCTID}.mk"
}

download_modem(){
    local cy_modem_config_file="modem_config/${CY_MODEM_CONFIG}"
    if [ -f "$cy_modem_config_file"  ];then
        echo "*** python cy_tools/tools/lf_download_modem.py $cy_modem_config_file ***"
        python cy_tools/lf_download_modem.py $cy_modem_config_file
        error "$?" "************ download_modem ************"
    fi
}

build_copy_cy_code(){
    if [ $(is_speedup_support) == "false" ]; then
        echo "It's not support speedup building on this build."
    elif [ $(speedup_get_state) != "origin" ]; then
        echo -e "\033[33mYou should clean your code before copy from chenyee dir!\nTry: \"repo clean\" or \"use -r to build\""
        echo -e "or You can TYPE [y] if you still want to do copy op![y/N]\033[0m"
        read
        if [ "$REPLY" != "y" ]; then
            exit 1
        fi
    fi

    get_chenyee_code "mtk" "7.0"
    download_modem 
    set_kernel_config
    #chenyee yangcuntao 2015-05-11 add
    . cy_tools/cy_oversea_locales.sh
    
    if [ "${FILE_SCRIPT}" != "" ];then
        . cy_tools/debug/${FILE_SCRIPT}
    else
        if [ "${MP_STATUS}" == "dev" -a "${TARGET_BUILD_VARIANT}" == "user" ];then
            . cy_tools/debug/devlog
        fi
    fi

    if [ $(is_speedup_support) == "false" ]; then
        echo "It's not support speedup building on this build."
    elif [ $(speedup_get_state) == "origin" ]; then
        git add -A > /dev/null
        git commit -m "CHENYEE:SPEEDUP:COPIED" > /dev/null
        git log -n 1 --pretty=format:%H > $SPEEDUP_PATH/.hash_copied
        speedup_set_state "copied"
    fi
}

build_copy_target(){
    get_release_version 
    copy_results_to_release
    error "$?" "*********** build_copy_target **********"
}

build_remake(){
    echo "*** build_remake ***"
    speedup_set_state "modified"
    config_verified_boot
    build_update_api
    fix_build_err
    enable_AudPar
    enable_audio_debug
    change_MMI_packages
    change_logd_size
    build_android
    build_copy_target
}

build_remake_billy(){
    #config_verified_boot
    #build_update_api
    fix_build_err
    enable_AudPar
    enable_audio_debug
    #dump_stack
    change_MMI_packages
    change_logd_size
    build_android
    #build_copy_target
}

create_check_list(){
    if $IS_SERVER_BUILD ;then
        echo "*** create_check_list $IS_SERVER_BUILD ***"
        echo "python /cy_cy_toolscreate_tags.py -d chenyee/alps/ -P $CHENYEEPRODUCTID -o out "
        python cy_tools/cy_create_tags.py -d chenyee/alps/ -P $CHENYEEPRODUCTID -o out
    fi
}

change_logd_size()
{
   version_defaults=$CY_BUILD_ROOT_DIR/build/core/version_defaults.mk
   tt=`cat $version_defaults | grep  PLATFORM_VERSION. | cut -d '=' -f 2` | grep -Eo '[0-9]+'
   PLATFORM_VERSION=`echo $tt | cut -d ' ' -f 4`
   if [ $PLATFORM_VERSION -ge 9];then
    android_logger=$CY_BUILD_ROOT_DIR/system/core/liblog/include/private/android_logger.h
    LogdSizeSetting=$CY_BUILD_ROOT_DIR/frameworks/base/packages/SettingsLib/src/com/android/settingslib/development/AbstractLogdSizePreferenceController.java
    LogdSizeSettingVendor=$CY_BUILD_ROOT_DIR/vendor/mediatek/proprietary/packages/apps/SettingsLib/src/com/android/settingslib/development/AbstractLogdSizePreferenceController.java
   else
    android_logger=$CY_BUILD_ROOT_DIR/system/core/include/private/android_logger.h
    LogdSizeSetting=$CY_BUILD_ROOT_DIR/packages/apps/Settings/src/com/android/settings/development/DevelopmentSettings.java
    LogdSizeSettingVendor=$CY_BUILD_ROOT_DIR/vendor/mediatek/proprietary/packages/apps/MtkSettings/src/com/android/settings/development/DevelopmentSettings.java
   fi

    grep "#define LOG_BUFFER_SIZE (256 \* 1024 \* 1024)" $android_logger > /dev/null
    if [ $? -eq 0 ]; then
            echo "logdsize is 256M,setting 16M，不用修改"
    else
       sed -i 's/#define LOG_BUFFER_SIZE (256 \* 1024)/#define LOG_BUFFER_SIZE (256 \* 1024 \* 1024)/g' $android_logger
       sed -i 's/SELECT_LOGD_DEFAULT_SIZE_VALUE = \"262144\"/SELECT_LOGD_DEFAULT_SIZE_VALUE = \"16777216\"/g' $LogdSizeSetting
       sed -i 's/SELECT_LOGD_DEFAULT_SIZE_VALUE = \"262144\"/SELECT_LOGD_DEFAULT_SIZE_VALUE = \"16777216\"/g' $LogdSizeSettingVendor
   fi
   #grep -nr LOG_BUFFER_SIZE $android_logger
   #grep -nr SELECT_LOGD_DEFAULT_SIZE_VALUE $LogdSizeSetting
   #grep -nr SELECT_LOGD_DEFAULT_SIZE_VALUE $LogdSizeSettingVendor

}

fix_build_err()
{
    MK=$CY_BUILD_ROOT_DIR/vendor/mediatek/proprietary/hardware/interfaces/Android.mk
    linenum=`sed -n '/touch/=' $MK`
    num=`echo ${linenum:0:3}`
    #echo $num
    s=`sed -n ''"$[num+1]"'p' $MK`
    if [ -z "$s" ];then
        #输入制表符TAB方法 ctrl+v ctrl+i
        sed -e ''"$num"'a\	@mv \$@ \$@_' -i $MK
        sed -e ''"$[num+1]"'a\	@sort \$@_ > $@' -i $MK
        sed -e ''"$[num+2]"'a\	@rm -f \$@_' -i $MK
    else
        echo "已经修复，不需要修改"
    fi

}
enable_AudPar(){
    AudPar=$CY_BUILD_ROOT_DIR/vendor/mediatek/proprietary/external/AudioParamParser/AudioParamParser.h
    sed -i 's/\/\/\#define FORCE_DEBUG_LEVEL/\#define FORCE_DEBUG_LEVEL/g' $AudPar
    PhoneWindowManager=$CY_BUILD_ROOT_DIR/frameworks/base/services/core/java/com/android/server/policy/PhoneWindowManager.java
    sed -i 's/DEBUG = false;/DEBUG = true;/g' $PhoneWindowManager
    sed -i 's/localLOGV = false;/localLOGV = true;/g' $PhoneWindowManager
    sed -i 's/DEBUG_INPUT = false;/DEBUG_INPUT = true;/g' $PhoneWindowManager
    sed -i 's/DEBUG_KEYGUARD = false;/DEBUG_KEYGUARD = true;/g' $PhoneWindowManager
    sed -i 's/DEBUG_LAYOUT = false;/DEBUG_LAYOUT = true;/g' $PhoneWindowManager
    sed -i 's/DEBUG_SPLASH_SCREEN = false;/DEBUG_SPLASH_SCREEN = true;/g' $PhoneWindowManager
    sed -i 's/DEBUG_WAKEUP = false;/DEBUG_WAKEUP = true;/g' $PhoneWindowManager
}

dump_stack()
{
    AudioALSAStreamManager=$CY_BUILD_ROOT_DIR/vendor/mediatek/proprietary/hardware/audio/common/V3/aud_drv/AudioALSAStreamManager.cpp
    grep "#include <utils/CallStack.h>" $AudioALSAStreamManager > /dev/null
    if [ $? -eq 0 ]; then
            echo "已经修改过，不用修改"
    else

        sed -i '2i #include <utils/CallStack.h> //billy' $AudioALSAStreamManager
        sed -i '\mMicMute = state;\a/CallStack\(\"Billy\"\);' $AudioALSAStreamManager
        sed -i 's/return pPlaybackHandler;/\tCallStack\(\"billy\"\);\n\t&/' $AudioALSAStreamManager
        sed -i 's/return pAudioALSAStreamOut;/\tCallStack\(\"billy\"\);\n\t&/' $AudioALSAStreamManager
    fi
    AudioPolicyManager=$CY_BUILD_ROOT_DIR/frameworks/av/services/audiopolicy/managerdefault/AudioPolicyManager.cpp
    grep "#include <utils/CallStack.h>" $AudioPolicyManager > /dev/null
    if [ $? -eq 0 ]; then
            echo "已经修改过，不用修改"
    else
        sed -i '47i #include <utils/CallStack.h> //billy' $AudioPolicyManager
        sed -i 's/ALOGV(\"setStreamVolumeIndex()/CallStack(\"billy\");\n\t&/' $AudioPolicyManager
    fi
}

scandir()
{
    local cur_dir parent_dir workdir
    workdir=$1
    cd ${workdir}
    if [ ${workdir} = "/" ]
    then
        cur_dir=""
    else
        cur_dir=$(pwd)
    fi

    for dirlist in $(ls ${cur_dir})
    do
        if test -d ${dirlist};then
            cd ${dirlist}
            scandir ${cur_dir}/${dirlist}
            cd ..
        else
            sed -i 's/\/\/#define LOG_NDEBUG 0/#define LOG_NDEBUG 0 \/\/billy/g' $dirlist
        fi
    done
}

enable_audio_debug()
{
    local cur_dir
    cur_dir=$(pwd)
    echo "**** curdir $(pwd) *******"
    echo "********* enable audio debug LOG_NDEBUG 0 **********"
    AudioJniDir=$CY_BUILD_ROOT_DIR/frameworks/base/core/jni
    AudioFlinger=$CY_BUILD_ROOT_DIR/frameworks/av/services/audioflinger
    AudioPolicy=$CY_BUILD_ROOT_DIR/frameworks/av/services/audiopolicy
    MediaJniDir=$CY_BUILD_ROOT_DIR/frameworks/base/media/jni
    Media=$CY_BUILD_ROOT_DIR/frameworks/av/media

    AudioStreamInternal=$Media/libaaudio/src/client/AudioStreamInternal.cpp
    AudioStreamInternalCapture=$Media/libaaudio/src/client/AudioStreamInternalCapture.cpp
    AudioStreamInternalPlay=$Media/libaaudio/src/client/AudioStreamInternalPlay.cpp
    MonoPipeReader=$Media/libnbaio/MonoPipeReader.cpp
    MonoPipe=$Media/libnbaio/MonoPipe.cpp
    Pipe=$Media/libnbaio/Pipe.cpp
    PipeReader=$Media/libnbaio/PipeReader.cpp

    AudioMixer=$Media/libaudioprocessing/AudioMixer.cpp

    grep "#define LOG_NDEBUG 0 //billy" $AudioMixer > /dev/null
    if [ $? -eq 0 ]; then
        echo "已经修改过，不用修改"
    else
        scandir $AudioJniDir
        scandir $AudioFlinger
        scandir $AudioPolicy
        scandir $MediaJniDir
        scandir $Media

        #sed -i 's/i);/name\/*billy*\/);/g' $AudioMixer
        sed -i 's/#define LOG_NDEBUG 0 \/\/billy/\/\/#define LOG_NDEBUG 0 \/\/billy/g' $AudioStreamInternal
        sed -i 's/#define LOG_NDEBUG 0 \/\/billy/\/\/#define LOG_NDEBUG 0 \/\/billy/g' $AudioStreamInternalCapture
        sed -i 's/#define LOG_NDEBUG 0 \/\/billy/\/\/#define LOG_NDEBUG 0 \/\/billy/g' $AudioStreamInternalPlay
        sed -i 's/#define LOG_NDEBUG 0 \/\/billy/\/\/#define LOG_NDEBUG 0 \/\/billy/g' $MonoPipeReader
        sed -i 's/#define LOG_NDEBUG 0 \/\/billy/\/\/#define LOG_NDEBUG 0 \/\/billy/g' $MonoPipe
        sed -i 's/#define LOG_NDEBUG 0 \/\/billy/\/\/#define LOG_NDEBUG 0 \/\/billy/g' $Pipe
        sed -i 's/#define LOG_NDEBUG 0 \/\/billy/\/\/#define LOG_NDEBUG 0 \/\/billy/g' $PipeReader

        cd $cur_dir
    fi

}

release_kernel_binary(){
    if [ "${CY_BUILD_WITH_CHENYEE_KERNEL_RELEASED}" == "yes" ];then
        python cy_tools/cy_release_kernel_binary.py cy_project/${CHENYEEPROJECTID}/${CHENYEEPRODUCTID}.mk
    fi
}

change_MMI_packages()
{
    if [ -d $CY_BUILD_ROOT_DIR/packages/apps/CY_MMI_old ];then
        echo "已经替换过了，不用再替换"
    else
        mv $CY_BUILD_ROOT_DIR/packages/apps/CY_MMI/Android.mk $CY_BUILD_ROOT_DIR/packages/apps/CY_MMI/Android.mk.bak
        mv $CY_BUILD_ROOT_DIR/packages/apps/CY_MMI $CY_BUILD_ROOT_DIR/packages/apps/CY_MMI_old
        ln -s ~/bin/shell_test/package/CY_MMI/OM8.0 $CY_BUILD_ROOT_DIR/packages/apps/CY_MMI

        mv $CY_BUILD_ROOT_DIR/packages/apps/CY_AutoMMI/Android.mk $CY_BUILD_ROOT_DIR/packages/apps/CY_AutoMMI/Android.mk.bak
        mv $CY_BUILD_ROOT_DIR/packages/apps/CY_AutoMMI $CY_BUILD_ROOT_DIR/packages/apps/CY_AutoMMI_old
        ln -s ~/bin/shell_test/package/CY_AutoMMI/OM8.0 $CY_BUILD_ROOT_DIR/packages/apps/CY_AutoMMI
    fi
}

build_new(){
    build_clean
    build_copy_cy_code
    fix_build_err
    enable_AudPar
    enable_audio_debug
    #dump_stack
    change_MMI_packages
    change_logd_size
    build_remake
    create_check_list
    release_kernel_binary
}
#Chenyee bianrong 2018-8-15 add for CSW1802DB-35 end

build_key(){
    echo "${MTK_PLATFORM} ${CHENYEEPRODUCTID}"
    ./cy_tools/verified_boot_tools/gen_vb_keys.py -o release/
}

build_sign(){
    build_copy_target
    ./cy_tools/verified_boot_tools/vb_sign.py -k cy_tools/verified_boot_tools/prik/ -c cy_project/tools/verified_boot_tools/configs/ -s $CY_RELEASE_DIR -d release/img_signed/
}

build_project(){
    speedup_set_state "modified"
    local project_path=$1
    if [ "$CMD_MMM" = "true" ]; then
        $BUILD_TOOLS --build_variant $TARGET_BUILD_VARIANT --PROJECT $project_path $TARGET_PRODUCT  --log_file $LOGPATH/$TARGET_PRODUCT-mmm
    else
        $BUILD_TOOLS --build_variant $TARGET_BUILD_VARIANT --project $project_path $TARGET_PRODUCT  --log_file $LOGPATH/$TARGET_PRODUCT-mmma
    fi
    error "$?" "*********** build_project ************"
}

build_sonar(){
    build_project "$CY_SONAR_CHECK_PATH"
    local apk_sonar=$(find cy_tools/ant -maxdepth 1 -mindepth 1 -type d)
    > $LOGPATH/build_sonar.log
    for dir in $apk_sonar
    do
        if [ -f "$dir/build.xml" ];then
            ant -buildfile $dir/build.xml sonar | tee -a  $LOGPATH/build_sonar.log
            error "$?" "*********** sonar check $CY_SONAR_CHECK_PATH ************"
            rm -rf $dir
        fi
    done
}

check_external_iw_version_sh(){
    modifyFile=external/iw/version.sh
    oldmd5="0ceb0c1cd79b2f7f10d12b15ccd066f4"
    sumvar=`md5sum ${modifyFile}`
    sumvar=${sumvar%% *}
    echo $sumvar

    if [[ ${sumvar} == ${oldmd5} ]];then
        sed -i "6,20d" ${modifyFile}
        sed -i "6i #Chenyee deleted 6 to 20 line for build" ${modifyFile}
        echo "`echo $(basename $0)` modify external/iw/version.sh and go to building"
    else
        if `grep -qw "#Chenyee deleted 6 to 20 line for build" ${modifyFile}` ;then
            echo "`echo $(basename $0)` Check external/iw/version.sh PASS, go to building"
        else
            echo "`echo $(basename $0)` external/iw/version.sh file changed, you have to update the MD5 value \"$oldmd5\" with $sumvar in this function"
            exit 0
        fi
    fi
}

setup_speedup(){
    [ ! -e $SPEEDUP_PATH ] && mkdir -p $SPEEDUP_PATH
}

is_speedup_support(){
    # DO NOT enable this feature on build server.
    if $IS_SERVER_BUILD; then
        echo false; return 1
    fi

    if [ "$CHENYEE_SPEEDUP_FEATURE" == "false" ]; then
        echo false; return 1
    fi

    # DO NOT enable this feature if repo's version is not matching the shell script.
    if [ ! -f $CY_BUILD_ROOT_DIR/../.repo/repo/subcmds/state.py ]; then
        echo false; return 1
    fi

    # DO NOT enable this feature on old brunch.
    if [ -f $CY_BUILD_ROOT_DIR/cy_tools/cy_speedup_flag ]; then
        echo true;  return 0
    else
        echo false; return 1
    fi
}

speedup_get_state(){
    if [ $(is_speedup_support) == "false" ]; then
        echo false; return 1 
    fi

    if [ x"$1" == x"block" ]; then
        { flock -e 7; cat $SPEEDUP_STATE; flock -u 7; } 7<>"$SPEEDUP_STATE"
    else
        cat $SPEEDUP_STATE
    fi
}

speedup_set_state(){
    if [ $(is_speedup_support) == "false" ]; then
        echo false; return 1
    else
        { flock -e 7; echo $1 > $SPEEDUP_STATE; flock -u 7; } 7<>"$SPEEDUP_STATE"
    fi
}

store_build_history(){
    local dline="==========================="
    local record=`date +"%Y.%m.%d-%H:%M:%S"`"    $@"

    [ ! -e $SPEEDUP_PATH/.history ] && echo "$dline END $dline" > $SPEEDUP_PATH/.history
    sed -i "1i\\$record" $SPEEDUP_PATH/.history
    echo $CHENYEEPRODUCTID > $SPEEDUP_PATH/.build_product
    echo $TARGET_BUILD_VARIANT > $SPEEDUP_PATH/.build_variant
}

show_build_history(){
    [ ! -e $SPEEDUP_PATH/.history ] && error 1 "NO BUILD HISTORY!"
    local dline="========================="
    echo -e "\033[1mThe Last Command:"
    echo -e "$(head -n 1 $SPEEDUP_PATH/.history | cut -b 24-)\033[0m\n"
    echo "$dline"" HISTORY ""$dline"
    cat $SPEEDUP_PATH/.history
}

# DO NOT write hard code in main func, use function to wrap it.
main(){
   # get_opts should be the first function call.
    get_opts "$@" 

    setup_speedup
    store_build_history "$0 $@"

    #check external/iw/version.sh before build
    check_external_iw_version_sh

    prebuild
    env | sort > $LOGPATH/.cy_product_debug.config

    #copy chenyee code
    if [ -n "$COPY_CHENYEE" ];then
        echo "copy chenyee code"
        build_copy_cy_code
    fi

    if [ -n "$ACTION" ];then
        echo "********* build $ACTION *********"
        build_$ACTION
    fi

    if [ -n "$MODULE" ];then
        echo "********* build $MODULE*********"
        config_verified_boot
        build_module $MODULE
    fi

    if [ -d "${PROJECT_PATH%%:*}" ];then
        echo "********* build $PROJECT_PATH *********"
        build_project $PROJECT_PATH
    fi

    if [ -n "$COPY_TARGET" -o "$MODULE" == "otapackage" ];then
        echo "********* build copy target *********"
        build_copy_target
    fi
    #Chenyee <CY_BSP_EFUSE> <chendonghai> modify out dir efuse download to false begin
    PRODUCT_OUT_ROOT="out/target/product"
    CY_TARGET_PRODUCT=${TARGET_PRODUCT/full_}
    TARGET_PRODUCT_OUT_ROOT="$PRODUCT_OUT_ROOT/${CY_TARGET_PRODUCT}"
    if [ -f cy_tools/verified_boot_tools/GenEfuseImg.py ];then
         chmod +x cy_tools/verified_boot_tools/GenEfuseImg.py
         ./cy_tools/verified_boot_tools/GenEfuseImg.py $TARGET_PRODUCT_OUT_ROOT $CHENYEEPROJECTID
    fi
    #Chenyee <CY_BSP_EFUSE> <chendonghai> modify out dir efuse download to false end
}


tools_name=$(basename $0)

MODULE=""
ACTION=""
IS_SERVER_BUILD=false

#CY_BUILD_ROOT_DIR=$(cd `dirname $0`; pwd)
CY_BUILD_ROOT_DIR=$(pwd)
SPEEDUP_PATH="$CY_BUILD_ROOT_DIR/.speedup"
SPEEDUP_STATE="$SPEEDUP_PATH/state"
BUILD_TOOLS="$CY_BUILD_ROOT_DIR/build.sh --setup_ccache=true"
LOGPATH="BUILDING_LOG"

export CY_BUILD_ROOT_DIR

main "$@"
