package gn.com.android.mmitest.item;

import java.lang.Thread.State;

import gn.com.android.mmitest.R;
import gn.com.android.mmitest.TestUtils;
import android.app.Activity;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.graphics.Color;
import android.media.AudioFormat;
import android.media.AudioManager;
import android.media.AudioRecord;
import android.media.AudioTrack;
import android.media.MediaRecorder;
import android.os.Bundle;
import android.util.Log;
import android.view.Gravity;
import android.view.KeyEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.WindowManager;
import android.widget.Button;
import android.widget.TextView;

public class EarphoneLoopbackTest extends Activity implements OnClickListener {
	private static String TAG = "EarphoneLoopbackTest";
	private final static int STATE_UNPLUGGIN = 0;
	private final static int STATE_PLUGGED = 1;
	private int mPluginState = STATE_UNPLUGGIN;

	private TextView mContentTv, mTitleTv;
	private Button mRightBtn, mWrongBtn, mRestartBtn;

	private AudioManager mAM;
	private RecordThread mRecThread = null;

	
	private BroadcastReceiver mEarphonePluginReceiver = new BroadcastReceiver() {
		@Override
		public void onReceive(Context context, Intent intent) {
			if (intent.getAction().equals(Intent.ACTION_HEADSET_PLUG)) {
				int state = intent.getIntExtra("state", 0);
				mPluginState = state;
				if (STATE_UNPLUGGIN == state) {
					mContentTv.setText(R.string.insert_earphone);
					mContentTv.setTextColor(Color.RED);
				}
				if (STATE_PLUGGED == state) {
					mContentTv.setText(R.string.inserted_earphone);
					mContentTv.setTextColor(Color.YELLOW);
				}
			}
		}
	};

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		WindowManager.LayoutParams lp = getWindow().getAttributes();
		lp.flags |= WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON
				| WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED;
		// lp.dispatchAllKey = 1;
		getWindow().setAttributes(lp);
		setContentView(R.layout.common_textview);

		mRightBtn = (Button) findViewById(R.id.right_btn);
		mRightBtn.setOnClickListener(this);
		mWrongBtn = (Button) findViewById(R.id.wrong_btn);
		mWrongBtn.setOnClickListener(this);

		mRestartBtn = (Button) findViewById(R.id.restart_btn);
		mRestartBtn.setOnClickListener(this);

		mContentTv = (TextView) findViewById(R.id.test_content);
		mContentTv.setGravity(Gravity.CENTER);
		mTitleTv = (TextView) findViewById(R.id.test_title);
		mTitleTv.setText(R.string.headsethook_note);

		mAM = (AudioManager) getSystemService(Context.AUDIO_SERVICE);
		registerReceiver(mEarphonePluginReceiver, new IntentFilter(
				Intent.ACTION_HEADSET_PLUG));
	}

	@Override
	public void onStart() {
		super.onStart();
		if (null != mAM) {
			int maxVol = mAM.getStreamMaxVolume(AudioManager.STREAM_MUSIC);
			mAM.setStreamVolume(AudioManager.STREAM_MUSIC, maxVol
					- TestUtils.VOL_MINUS_INCALL, 0);
			mAM.setParameters("MMIMic=2");
			Log.e(TAG, " set stream vol --> AudioManager.STREAM_MUSIC. Mode --> MMIMic=2");
			Log.e(TAG, "maxVol = " + maxVol + " setStreamVolume = "
					+ (maxVol - TestUtils.VOL_MINUS_INCALL));
			// mAM.setMode(AudioManager.MODE_IN_CALL);
		}
		Log.e(TAG, "---onStart---");
	}
	
	@Override
	protected void onDestroy() {
		super.onDestroy();
		unregisterReceiver(mEarphonePluginReceiver);
	}

	class RecordThread extends Thread {
		private AudioRecord mRecord;

		private AudioTrack mTrack;
		private int mRecBuffSize, mTrackBuffSize;

		public RecordThread() {
			mRecBuffSize = AudioRecord.getMinBufferSize(8000,
					AudioFormat.CHANNEL_CONFIGURATION_MONO,
					AudioFormat.ENCODING_PCM_16BIT);
			mTrackBuffSize = AudioTrack.getMinBufferSize(8000,
					AudioFormat.CHANNEL_CONFIGURATION_MONO,
					AudioFormat.ENCODING_PCM_16BIT);
			mRecord = new AudioRecord(MediaRecorder.AudioSource.MIC, 8000,
					AudioFormat.CHANNEL_CONFIGURATION_MONO,
					AudioFormat.ENCODING_PCM_16BIT, mRecBuffSize);
			mTrack = new AudioTrack(AudioManager.STREAM_MUSIC, 8000,
					AudioFormat.CHANNEL_CONFIGURATION_MONO,
					AudioFormat.ENCODING_PCM_16BIT, mTrackBuffSize,
					AudioTrack.MODE_STREAM);
		}

		public void run() {
			try {
				byte[] buffer = new byte[mRecBuffSize];
				mRecord.startRecording();
				mTrack.play();
				Log.e(TAG, "mPluginState = " + mPluginState);
				while (true) {
					if (interrupted())
						break;
					
					if(mPluginState == STATE_UNPLUGGIN) {
						continue;
					}
					
					int bufferReadResult = mRecord.read(buffer, 0, mRecBuffSize);
					if (bufferReadResult > 0 && bufferReadResult % 2 == 0) {
						//Log.e(TAG, "bufferReadResult = " + bufferReadResult);
						byte[] tmpBuf = new byte[bufferReadResult];
						System.arraycopy(buffer, 0, tmpBuf, 0, bufferReadResult);
						mTrack.write(tmpBuf, 0, bufferReadResult);
					}
				}
				buffer = null;
				// mAM.setMode(AudioManager.MODE_NORMAL);
			} catch (Throwable t) {
				Log.v(TAG, Log.getStackTraceString(t));
			} finally {
				mTrack.release();
				mRecord.release();
			}
		}
	}
	
	@Override
	public void onClick(View v) {
		// TODO Auto-generated method stub
		switch (v.getId()) {
		case R.id.right_btn: {
			TestUtils.rightPress(TAG, this);
			break;
		}

		case R.id.wrong_btn: {
			TestUtils.wrongPress(TAG, this);
			break;
		}

		case R.id.restart_btn: {
			TestUtils.restart(this, TAG);
			break;
		}
		}
		cleanState();
	}

	private void cleanState() {
		mRightBtn.setEnabled(false);
		mWrongBtn.setEnabled(false);
		mRestartBtn.setEnabled(false);
		mAM.setMode(AudioManager.MODE_NORMAL);
		mAM.setParameters("MMIMic=0");
		Log.e(TAG, "cleanState: setParameters MMIMic=0");
		
		// RecordThread should end when exiting
		if (mRecThread != null && mRecThread.isAlive()) {
			mRecThread.interrupt();
			mRecThread = null;
		}
	}

	@Override
	public boolean dispatchKeyEvent(KeyEvent event) {
		if (event.getAction() == KeyEvent.ACTION_DOWN) {
			switch (event.getKeyCode()) {
			case KeyEvent.KEYCODE_CALL:
			case KeyEvent.KEYCODE_ENDCALL:
			case KeyEvent.KEYCODE_HEADSETHOOK:
				mTitleTv.setText(R.string.headsethook_press);
				mRightBtn.setEnabled(true);
				mWrongBtn.setEnabled(true);
				mRestartBtn.setEnabled(true);

				//Initial record thread here to prevent AudioTrack & RecordRecord
				// having not release during PhoneLoopbackTest
				if (mRecThread == null) {
					mRecThread = new RecordThread();
				}
				
				if (mRecThread != null && mRecThread.getState() == State.NEW) {
					Log.e(TAG, "--- RecordThread onStart---");
					mRecThread.start();
				}
				break;
			}
		}
		return true;
	}
}
