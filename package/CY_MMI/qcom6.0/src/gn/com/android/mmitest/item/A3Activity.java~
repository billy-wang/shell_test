
package gn.com.android.mmitest.item;


import java.io.File;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import android.view.KeyEvent;
import android.view.View;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;
import android.widget.Button;

import com.zyt.jni.common.ZytJniInterface;
import gn.com.android.mmitest.R;
import gn.com.android.mmitest.TestUtils;

import java.io.BufferedReader;
import android.view.View;
import android.view.View.OnClickListener;


public class A3Activity extends Activity implements OnClickListener {

	private EditText et;
	private TextView mSN;
	private TextView updateTestFlag;
	private Button updateTest;
	private String cosCodeBinName = "cos_code2002.bin"; // 1060 1070 1202 2002
	private final String PASS = "pass";
	private final String FAILURE = "failure";
	private final String WAITTING = "waitting";
	private boolean clickFlag = true;
    private Button mRightBtn, mWrongBtn, mRestartBtn;
	private static final String TAG = "A3Activity";
	
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
                TestUtils.setWindowFlags(this);
		setContentView(R.layout.a3_test);

		et = (EditText) findViewById(R.id.chip_version);
		mSN = (TextView) findViewById(R.id.sn);
		updateTestFlag = (TextView) findViewById(R.id.update_test_flag);
		updateTest = (Button) findViewById(R.id.update_test);
		updateTest.setOnClickListener(this);
        mRightBtn = (Button) findViewById(R.id.right_btn);
        mRightBtn.setOnClickListener(this);
        mWrongBtn = (Button) findViewById(R.id.wrong_btn);
        mWrongBtn.setOnClickListener(this);
        mRestartBtn = (Button) findViewById(R.id.restart_btn);
        mRestartBtn.setOnClickListener(this);

		init();
	}

	private void appendText(String a) {
		String origin = et.getText().toString();
		et.setText(a + "\n" + origin);
	}

	private void init() {
		String sn = ZytJniInterface.getChipSN(this);
		if (sn == null) {
			mSN.setText("SN: is null");
		} else {
			mSN.setText("SN: " + sn);
		}

		String version = ZytJniInterface.getChipVersion(this);
		if (version != null) {
			appendText("\u76ee\u524d\u7684version:" + version);
		} else {
			appendText("\u76ee\u524d\u7684version: is null");
		}
	}

	private final int UPDATE_TEST = 3;
	@SuppressLint("HandlerLeak")
	private Handler handler = new Handler() {

		@Override
		public void handleMessage(Message msg) {
			super.handleMessage(msg);
			switch (msg.what) {
			case UPDATE_TEST:
				int ret3 = (Integer) msg.obj;
				if (ret3 == ZytJniInterface.UPDATE_COS_COMPUTING) {
					updateTestFlag.setText(WAITTING);
					updateTestFlag.setTextColor(android.graphics.Color.BLUE);
					Log.w("veb", "please waitting,background have crypt");
					appendText("\u68c0\u6d4b\u5230\u540e\u53f0\u6b63\u5728\u8fdb\u884c\u52a0\u89e3\u5bc6\u670d\u52a1\uff0c\u8bf7\u7a0d\u7b49\u4e00\u4f1a\u513f\u518d\u5347\u7ea7");
				} else if (ret3 == ZytJniInterface.CHIP_IS_ABNORMAL) {
					updateTestFlag.setText(FAILURE);
					updateTestFlag.setTextColor(android.graphics.Color.RED);
					Log.w("veb", "update or test failure");
					appendText("\u5347\u7ea7\u6216\u8005\u6d4b\u8bd5\u5931\u8d25");
				} else {
					updateTestFlag.setText(PASS);
					updateTestFlag.setTextColor(android.graphics.Color.GREEN);

					String version = ZytJniInterface
							.getChipVersion(A3Activity.this);
					if (version != null) {
						String versionString = new String(version);
						appendText("\u5347\u7ea7\u6d4b\u8bd5\u540e\u7684version:" + versionString);
					} else {
						appendText("\u5347\u7ea7\u6d4b\u8bd5\u540e\u7684version:\u5347\u7ea7\u6210\u529f\uff0c\u4f46\u662f\u82af\u7247\u7248\u672c\u53f7\u83b7\u53d6\u5f02\u5e38\uff0c\u8bf7\u518d\u6b21\u5c1d\u8bd5");
					}
					mRightBtn.setEnabled(true);
					mWrongBtn.setEnabled(false);
				}
				clickFlag = true;
				updateTest.setEnabled(clickFlag);
				updateTest.setTextColor(android.graphics.Color.WHITE);

				break;
			default:
				break;
			}
		}
	};

	@Override
	public void onClick(View v) {
		final String toast = getResources().getString(R.string.wait_message);
		final File cosfile = new File(
				Environment.getExternalStorageDirectory(), cosCodeBinName);
		switch (v.getId()) {
			case R.id.update_test:
				if (clickFlag == true) {
					clickFlag = false;
					updateTest.setEnabled(clickFlag);
					updateTest.setTextColor(android.graphics.Color.BLACK);
					Toast.makeText(this, toast, Toast.LENGTH_SHORT).show();

					new Thread(new Runnable() {

						@Override
						public void run() {

							int ret3 = ZytJniInterface.updateAndTestDriver(
									A3Activity.this, cosfile);
							Log.w("veb", "update and test:" + ret3);
							Message msg = handler.obtainMessage();
							msg.what = UPDATE_TEST;
							msg.obj = ret3;
							handler.sendMessage(msg);
						}
					}).start();
				}
				break;

			case R.id.right_btn: {
				mRightBtn.setEnabled(false);
				mWrongBtn.setEnabled(false);
				mRestartBtn.setEnabled(false);
				TestUtils.rightPress(TAG, this);
				break;
			}

			case R.id.wrong_btn: {
				mRightBtn.setEnabled(false);
				mWrongBtn.setEnabled(false);
				mRestartBtn.setEnabled(false);
				TestUtils.wrongPress(TAG, this);
				break;
			}

			case R.id.restart_btn: {
				mRightBtn.setEnabled(false);
				mWrongBtn.setEnabled(false);
				mRestartBtn.setEnabled(false);
				TestUtils.restart(this, TAG);
				break;
			}

		default:
			break;
		}
	}
	
	public boolean dispatchKeyEvent (KeyEvent event) {
		return true;
	}

    
}
