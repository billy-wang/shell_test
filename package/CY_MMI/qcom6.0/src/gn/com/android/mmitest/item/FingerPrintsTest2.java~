
package gn.com.android.mmitest.item;

import gn.com.android.mmitest.R;
import gn.com.android.mmitest.TestUtils;

import java.lang.reflect.Method;

import android.app.Activity;
import android.graphics.Bitmap;
import android.graphics.Matrix;
import android.graphics.drawable.BitmapDrawable;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import android.view.KeyEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.WindowManager;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.TextView;

import android.content.Context;
import android.os.IBinder;
import android.os.RemoteException;
import com.fingerprints.service.IFingerprintService;
import com.fingerprints.service.IFingerprintSensorTest;
import com.fingerprints.service.IFingerprintSensorTestListener;
import com.fingerprints.service.FingerprintSensorTest;
import com.fingerprints.service.FingerprintSensorTest.FingerprintSensorTestListener;

public class FingerPrintsTest2 extends Activity implements OnClickListener {
    Button mToneBt;

    private Button mRightBtn, mWrongBtn, mRestartBtn;
    private Object mObj;
    TextView titleTv;
    private int sensorTestType = -1;
    private Context mContext;
    private static final String TAG = "FingerPrintsTest2";
    private IFingerprintSensorTest mService;

    FingerprintSensorTest mFingerprintSensorTest;
    //Gionee zhangke 20160428 modify for CR01687958 start
    private boolean mIsTimeOver = false;
    private boolean mIsPass = false;
    //Gionee zhangke 20160428 modify for CR01687958 end

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        TestUtils.setWindowFlags(this);
        setContentView(R.layout.fingerprints_textview);
        titleTv = (TextView) findViewById(R.id.test_title);
        titleTv.setText(R.string.fingerprints_note2);
        try{
            mFingerprintSensorTest = new FingerprintSensorTest();
        }catch(Exception e){
            Log.i(TAG, "mFingerprintSensorTest e="+e.getMessage());
        }

        //Gionee zhangke 20160428 modify for CR01687958 start
        mRightBtn = (Button) findViewById(R.id.right_btn);
        mWrongBtn = (Button) findViewById(R.id.wrong_btn);
        mRestartBtn = (Button) findViewById(R.id.restart_btn);
        mRightBtn.setEnabled(false);
		mWrongBtn.setEnabled(false);
		mRestartBtn.setEnabled(false);

        Log.i(TAG, "onCreate handler start");
        Handler handler = new Handler();
        handler.postDelayed(new Runnable() {
        
        @Override
        public void run() {
                // TODO Auto-generated method stub
                Log.i(TAG, "hand enable button");
				mIsTimeOver = true;
				if(mIsPass){
					mRightBtn.setEnabled(true);
				}

				mWrongBtn.setEnabled(true);
				mRestartBtn.setEnabled(true);

                mRightBtn.setOnClickListener(FingerPrintsTest2.this);
                mWrongBtn.setOnClickListener(FingerPrintsTest2.this);
                mRestartBtn.setOnClickListener(FingerPrintsTest2.this);
            }
        }, TestUtils.BUTTON_ENABLED_DELAY_TIME);
        //Gionee zhangke 20160428 modify for CR01687958 end

    }

    @Override
    public void onResume() {
        super.onResume();
        Log.i(TAG, "onResume mFingerprintSensorTest selfTest :mFingerprintSensorTest="+mFingerprintSensorTest);
        try{
            Log.i(TAG, "onResume begin checkerboardTest");
            mFingerprintSensorTest.checkerboardTest(mFingerprintSensorTestListener);
            Log.i(TAG, "onResume end checkerboardTest");
        }catch(Exception e){
            titleTv.setText(R.string.fingerprints_load_fail);
            Log.e(TAG, "checkerboardTest Exception="+e.getMessage());
        }
    }

    @Override
    public void onPause() {
        super.onPause();
        if(mFingerprintSensorTest != null){
            mFingerprintSensorTest.cancel();
        }
    }

    @Override
    public void onClick(View v) {
        // TODO Auto-generated method stub
        switch (v.getId()) {
            case R.id.right_btn: {
                mRightBtn.setEnabled(false);
                mWrongBtn.setEnabled(false);
                mRestartBtn.setEnabled(false);
                TestUtils.rightPress(TAG, this);
                break;
            }

            case R.id.wrong_btn: {
                mRightBtn.setEnabled(false);
                mWrongBtn.setEnabled(false);
                mRestartBtn.setEnabled(false);
                TestUtils.wrongPress(TAG, this);
                break;
            }

            case R.id.restart_btn: {
                mRightBtn.setEnabled(false);
                mWrongBtn.setEnabled(false);
                mRestartBtn.setEnabled(false);
                TestUtils.restart(this, TAG);
                break;
            }
        }
    }

    @Override
    public boolean dispatchKeyEvent(KeyEvent event) {
        return true;
    }

    private FingerprintSensorTestListener mFingerprintSensorTestListener = new FingerprintSensorTestListener() {
    	
    	@Override
    	public void onSelfTestResult(boolean result) {
    		// TODO Auto-generated method stub
    		Log.i(TAG, "onSelfTestResult result="+result);
    	}
    	
    	@Override
    	public void onImagequalityTestResult(int result) {
    		// TODO Auto-generated method stub
    		Log.i(TAG, "onImagequalityTestResult result="+result);
    	}
    	
    	@Override
    	public void onCheckerboardTestResult(int result) {
    		// TODO Auto-generated method stub
    		Log.i(TAG, "onCheckerboardTestResult result="+result);
    		if(result == 0){
            	titleTv.setText(R.string.sensortest_deadpixel_test_success);
                //Gionee zhangke 20160428 modify for CR01687958 start
                mIsPass = true;
                if(mIsTimeOver){
                    mRightBtn.setEnabled(true);
                }
                //Gionee zhangke 20160428 modify for CR01687958 end 
    		}else {
    			titleTv.setText(R.string.sensortest_deadpixel_test_fail);
    		}
    	}
    
    	@Override
    	public void onCaptureTestResult(int result) {
    		// TODO Auto-generated method stub
    		Log.i(TAG, "onCaptureTestResult result="+result);
    	}
    
    };

}
