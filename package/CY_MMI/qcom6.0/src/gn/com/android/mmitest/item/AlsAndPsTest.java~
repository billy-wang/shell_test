package gn.com.android.mmitest.item;

import gn.com.android.mmitest.R;
import gn.com.android.mmitest.TestUtils;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Timer;
import java.util.TimerTask;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.Dialog;
import android.graphics.Color;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.os.Bundle;
import android.provider.Settings;
import android.util.Log;
import android.view.KeyEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.WindowManager;
import android.widget.Button;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.os.SystemProperties;

public class AlsAndPsTest extends Activity implements OnClickListener {
    private TextView tv;

    private Button mRightBtn, mWrongBtn, mRestartBtn;

    private static final String TAG = "AlsAndPsTest";

    private SensorManager mSensorMgr;

    private Sensor mLSensor;
    private Sensor mPSensor;
    private Sensor mDisSensor;
    private Timer mTimer;
    
    //Gionee liss 20111215 add mLightProTitle for CR00478802 start    
    private TextView mLightNum, mProximityNum, mLightProTitle,mCrntDistanse,colourNum;
    //Gionee liss 20111215 add mLightProTitle for CR00478802 end

    private RelativeLayout mParent;

    private boolean mIsClose, mIsFar;

    private boolean mIsDark;
    
    private boolean mIsLightRight, mIsProximityRight;
    private boolean mFarTag = false;
    
    private static final int CAL_FAIL = 0;
    private static final int CAL_SUCCESS = 1;
     String a = null;
    
  //Gionee zhangxiaowei 20131109 add for CR00946202 start
    private boolean mIsScreenBright= false;
    private boolean mIsScreenBrightStatus = false;
  //Gionee zhangxiaowei 20131109 add for CR00946202 end
    
    private long mPrivTime = System.currentTimeMillis();
    private SensorEventListener mLightListener = new SensorEventListener() {

        @Override
        public void onSensorChanged(SensorEvent event) {
            // TODO Auto-generated method stub
            mLightNum.setText(event.values[0] + "");
           // colourNum.setText(event.values[1] + "");;
            // if (false == mIsInit && event.values[0] < 5) {
            // mIsInit = true;
            // return;
            // }
            /** xiaolin
            //Gionee liss 20111215 add for CR00478802 start
            if (com.mediatek.featureoption.FeatureOption.GN_OVERSEA_PRODUCT && event.values[0] < 50) {
                mIsDark = true;
             //Gionee liss 20111215 add for CR00478802 end

            } else */ 
            Log.e(TAG, "LightNum = " + event.values[0]);
            if(event.values[0] < 50) {
                mIsDark = true;
            } else {
                mIsDark = false;
            }
        
            //Gionee liss 20111215 add for CR00478802 start
            //if (true == mIsFar && true == mIsClose && event.values[0] < 5) {
            //Gionee xiaolin 20120227 modify for CR00534606 start 
            if (true == mIsClose && true == mIsDark && mFarTag) {
            //Gionee xiaolin 20120227 modify for CR00534606 end
            //Gionee liss 20111215 add for CR00478802 end
                mParent.setBackgroundColor(Color.GREEN);
                mRightBtn.setEnabled(true);
            } else {
                mParent.setBackgroundColor(Color.BLACK);
            }
        }

        @Override
        public void onAccuracyChanged(Sensor sensor, int accuracy) {
            // TODO Auto-generated method stub

        }

    };
    
    SensorEventListener mProximityListener = new SensorEventListener() {

        @Override
        public void onSensorChanged(SensorEvent event) {
            // TODO Auto-generated method stub
            int i = (int) event.values[0];
            Log.e(TAG, "ProximityNum = " + i);
            mIsClose = (i == 0 ? true : false);
            //Gionee xiaolin 20120227 modify for CR00534606 start
            if (i != 0) {
            	mFarTag = true;
            	 Log.e(TAG, "i2222 = mFarTag = true;" );
            }
            if (true == mIsDark && true == mIsClose && mFarTag) {
            //Gionee xiaolin 20120227 modify for CR00534606 end
                mParent.setBackgroundColor(Color.GREEN);
                mRightBtn.setEnabled(true);
            } else {
                mParent.setBackgroundColor(Color.BLACK);
            }
            
            if (0 != i)
            	i = 1;
            mProximityNum.setText(i + "");
        }

        @Override
        public void onAccuracyChanged(Sensor sensor, int accuracy) {
            // TODO Auto-generated method stub

        }

    };

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        TestUtils.setWindowFlags(this);
        
        setContentView(R.layout.light_proximity);
        
        // Gionee liss 20111215 add for CR00478802 start
        mLightProTitle = (TextView) findViewById(R.id.light_proximity_title);
        
 
        try {
        	a = readPsValue();
		} catch (Exception e) {
			// TODO: handle exception
			 e.printStackTrace();
		}
        Log.e(TAG,"ps_result = " + readPsValue());
        // Gionee liss 20111215 add for CR00478802 end
        
        mLightNum = (TextView) findViewById(R.id.light_num);
        mProximityNum = (TextView) findViewById(R.id.proximity_num);
        mCrntDistanse = (TextView) findViewById(R.id.crnt_distanse_num);
      //  colourNum  =(TextView) findViewById(R.id.colournum);
        mParent = (RelativeLayout) findViewById(R.id.light_proximity_rl);
        mSensorMgr = (SensorManager) this.getSystemService(SENSOR_SERVICE);

        mRightBtn = (Button) findViewById(R.id.right_btn);
        mRightBtn.setOnClickListener(this);
        mWrongBtn = (Button) findViewById(R.id.wrong_btn);
        mWrongBtn.setOnClickListener(this);
        mRestartBtn = (Button) findViewById(R.id.restart_btn);
        mRestartBtn.setOnClickListener(this);
      //Gionee zhangxiaowei 20131109 add for CR00946202 start
        updateSettings();
        if(mIsScreenBright == true){
        	Settings.System.putInt(this.getContentResolver(),
                    Settings.System.SCREEN_BRIGHTNESS_MODE, 0);
        	mIsScreenBrightStatus =true;
        
        }
      //Gionee zhangxiaowei 20131109 add for CR00946202 end
        
    }
    
  //Gionee zhangxiaowei 20131109 add for CR00946202 start
    public void updateSettings() {
    	mIsScreenBright = isRespirationLampNotificationOn();
	}
	public boolean isRespirationLampNotificationOn() {
		boolean result = false;
	result = Settings.System.getInt(this.getContentResolver(),
                Settings.System.SCREEN_BRIGHTNESS_MODE, 0) != 0;
		return result;
    }
	//Gionee zhangxiaowei 20131109 add for CR00946202 end
    
    
	private String readPsValue() {
        BufferedReader bufferReader = null;
        String mFileName = "/persist/ps_calib";
        String line , line1,line2 = null;
        try {
                bufferReader = new BufferedReader(new FileReader(mFileName));
                line = bufferReader.readLine();
                line1 = bufferReader.readLine();
                line2 = bufferReader.readLine();
                Log.e(TAG,"readPsValue = " + line2);
        } catch (Exception e) {
                e.printStackTrace();
                return null;
        }   
 
        return line2;
}
    
	private String readPsValue2() {
        String line = null , line1 = null, line3 = null;
        try {
                line = getRightDistanse(1);
                line1 = getRightDistanse(2);
                line3 = getRightDistanse(3);
                
                long now = System.currentTimeMillis();
                if (now - mPrivTime > 200) {
                	Log.v(TAG, "write system prop");
	                SystemProperties.set("persist.radio.psensor.hth", line);
	                SystemProperties.set("persist.radio.psensor.lth", line1);
	                SystemProperties.set("persist.radio.psensor.data", line3);
	                mPrivTime = now;
                }
                Log.e(TAG,"disnum = " + line3);
                Log.e(TAG,"colse = " + line);
                Log.e(TAG,"far = " + line1);
				mCrntDistanse.setText(line3 + ", " + line + ", " + line1 );
        } catch (Exception e) {
                e.printStackTrace();
                return null;
        }   
 
        return line3;
}

    
    protected Dialog onCreateDialog(int id) {
        Dialog dialog = null;
        switch(id) {
            case CAL_FAIL:
                AlertDialog.Builder builder = new AlertDialog.Builder(this);
                builder.setMessage("fail to calibrate!")
                .setCancelable(false)
                .setPositiveButton("ok", null);
                dialog = builder.create();
                break;
        }
        return dialog;
    }
    @Override
    protected void onResume() {
        super.onResume();
        
        
        mLSensor = mSensorMgr.getDefaultSensor(Sensor.TYPE_LIGHT);
        if(mLSensor != null ){
		    mIsLightRight = mSensorMgr.registerListener(mLightListener, mLSensor, SensorManager.SENSOR_DELAY_FASTEST);
		
		 int result = 0;//SensorPsensorUserCal.performPsensorCal((byte) 0,(byte) 0);
         Log.e(TAG,"result = "+ result );
       
       if(result == 0 ){
    	   showDialog(CAL_SUCCESS);
       }else {
    	   showDialog(CAL_FAIL);
//	                 }
//	 }
	     }
		    if (false == mIsLightRight) {
		        try {
		            Thread.sleep(300);
		            mIsLightRight = mSensorMgr.registerListener(mLightListener, mLSensor,
		                    SensorManager.SENSOR_DELAY_FASTEST);
		        } catch (InterruptedException e) {

		        }
		        if (false == mIsLightRight) {
		            mLightNum.setText(R.string.init_light_sensor_fail);
		        }
		    }
        }
        mPSensor = mSensorMgr.getDefaultSensor(Sensor.TYPE_PROXIMITY);
		if(mPSensor != null)
		{
		    mIsProximityRight = mSensorMgr.registerListener(mProximityListener, mPSensor, SensorManager.SENSOR_DELAY_FASTEST);
		    if (false == mIsProximityRight) {
		        try {
		            Thread.sleep(300);
		            mIsProximityRight = mSensorMgr.registerListener(mProximityListener, mPSensor,
		                    SensorManager.SENSOR_DELAY_FASTEST);
		        } catch (InterruptedException e) {

		        }
		        if (false == mIsProximityRight) {
		            mProximityNum.setText(R.string.init_proximity_sensor_fail);
		        }
		    }
		}	
        mTimer = new Timer();
        mTimer.schedule(new TimerTask() {
            @Override
            public void run() {
                runOnUiThread(new Runnable() {
                    public void run() {
			readPsValue2();
                    }
                });
            }
        }, 0, 100);

    }

    @Override
    public void onPause() {
        super.onPause();
        if (true == mIsLightRight) {
            mSensorMgr.unregisterListener(mLightListener);
        }
        if (true == mIsProximityRight) {
            mSensorMgr.unregisterListener(mProximityListener);
        }
        if(mIsScreenBrightStatus){
        	Settings.System.putInt(this.getContentResolver(),
                    Settings.System.SCREEN_BRIGHTNESS_MODE, 1);

        }

        if (mTimer != null) {
            mTimer.cancel();
            mTimer = null;
        }

    }
    public String getRightDistanse(int i) {
        String rightDistanse = null;
    	String mFileName = null;
	 	if(i == 1){
	    mFileName = "/sys/bus/platform/drivers/als_ps/high_threshold";}
		else if(i == 2){
		mFileName = "/sys/bus/platform/drivers/als_ps/low_threshold";}
		else if(i == 3){
		mFileName = "/sys/bus/platform/drivers/als_ps/pdata";}
        FileInputStream fileInputStream = null;
        InputStreamReader inputStreamReader = null;
        BufferedReader br = null;
        try {
            try {
                File voltageFilePath = new File(mFileName);
                if (voltageFilePath.exists()) {
                    fileInputStream = new FileInputStream(voltageFilePath);
                    inputStreamReader = new InputStreamReader(fileInputStream);
                    br = new BufferedReader(inputStreamReader);
                    String data = null;	
                    while ((data = br.readLine()) != null) {
                        rightDistanse = data;
                    }
                }
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            } finally {
                if (fileInputStream != null) {
                    fileInputStream.close();
                }
                if (inputStreamReader != null) {
                    inputStreamReader.close();
                }
                if (br != null) {
                    br.close();
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
		Log.d(TAG, "rightDistanse="+rightDistanse);
        return rightDistanse;
    }

    @Override
    public void onClick(View v) {
        // TODO Auto-generated method stub
        switch (v.getId()) {

            case R.id.right_btn: {
                mRightBtn.setEnabled(false);
                mWrongBtn.setEnabled(false);
                mRestartBtn.setEnabled(false);
                TestUtils.rightPress(TAG, this);
                break;
            }

            case R.id.wrong_btn: {
                mRightBtn.setEnabled(false);
                mWrongBtn.setEnabled(false);
                mRestartBtn.setEnabled(false);
                TestUtils.wrongPress(TAG, this);
                break;
            }
            
            case R.id.restart_btn: {
                mRightBtn.setEnabled(false);
                mWrongBtn.setEnabled(false);
                mRestartBtn.setEnabled(false);
                TestUtils.restart(this, TAG);
                break;
            }
        }

    }

    @Override
    public boolean dispatchKeyEvent(KeyEvent event) {
        return true;
    }
}
