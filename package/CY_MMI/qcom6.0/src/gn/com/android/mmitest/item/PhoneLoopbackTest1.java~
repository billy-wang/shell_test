
package gn.com.android.mmitest.item;

import java.lang.Thread.State;

import gn.com.android.mmitest.R;
import gn.com.android.mmitest.TestUtils;
import android.app.Activity;
import android.content.Context;
import android.media.AudioFormat;
import android.media.AudioManager;
import android.media.AudioRecord;
import android.media.AudioTrack;
import android.media.MediaRecorder;
import android.os.Bundle;
import android.view.KeyEvent;
import android.view.View;
import android.view.WindowManager;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.TextView;
import android.util.Log;

public class PhoneLoopbackTest1 extends Activity implements OnClickListener {
	private static String TAG = "PhoneLoopbackTest1";//音频回路1
	
    TextView mContentTv;
    private Button mRightBtn, mWrongBtn, mRestartBtn;
    
    RecordThread mRecThread= null;
    AudioManager mAM;
    
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        WindowManager.LayoutParams lp = getWindow().getAttributes();
        lp.flags |= WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON | WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED; 
        //lp.dispatchAllKey = 1;
        getWindow().setAttributes(lp);

        setContentView(R.layout.common_textview);

        mRightBtn = (Button) findViewById(R.id.right_btn);
        mRightBtn.setOnClickListener(this);
        mWrongBtn = (Button) findViewById(R.id.wrong_btn);
        mWrongBtn.setOnClickListener(this);
        mRightBtn.setEnabled(true);
        mRestartBtn = (Button) findViewById(R.id.restart_btn);
        mRestartBtn.setOnClickListener(this);
        mAM = (AudioManager) getSystemService(Context.AUDIO_SERVICE);
        
		if (mRecThread == null) {
			mRecThread = new RecordThread();
		}
    }

    @Override
    public void onClick(View v) {
        // TODO Auto-generated method stub
        switch (v.getId()) {
            case R.id.right_btn: {
                mRightBtn.setEnabled(false);
                mWrongBtn.setEnabled(false);
                mRestartBtn.setEnabled(false);
                TestUtils.rightPress(TAG, this);
                break;
            }

            case R.id.wrong_btn: {
                mRightBtn.setEnabled(false);
                mWrongBtn.setEnabled(false);
                mRestartBtn.setEnabled(false);
                TestUtils.wrongPress(TAG, this);
                break;
            }
            
            case R.id.restart_btn: {
                mRightBtn.setEnabled(false);
                mWrongBtn.setEnabled(false);
                mRestartBtn.setEnabled(false);
                TestUtils.restart(this, TAG);
                break;
            }
        }
		// RecordThread should end when exiting
		if (mRecThread != null && mRecThread.isAlive()) {
			mRecThread.interrupt();
			mRecThread = null;
		}
    }

    @Override
    public void onStart() {
        super.onStart();
        //add by zhangxiaowei start
        mAM.setMode(AudioManager.MODE_NORMAL);
        mAM.setParameters("MMIMic=1");
        Log.e(TAG, " onStart set mode --> mode_normal,setParameters MMIMic=1");
        try {
            Thread.sleep(500);
        } catch (InterruptedException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

      //add by zhangxiaowei end
        if (mRecThread != null && (mRecThread.getState() == State.NEW)) {
        	mRecThread.start();
        }
        if (null != mAM) {
            int maxVol = mAM.getStreamMaxVolume(AudioManager.STREAM_MUSIC);
            mAM.setStreamVolume(AudioManager.STREAM_MUSIC, maxVol , 0);
        }
    }
    @Override
    public void onPause() {
        super.onPause();
        mAM.setParameters("MMIMic=0");
        Log.e(TAG, " onPause setParameters MMIMic=0");
        // Gionee xiaolin 20120613 modify for CR00624109 start
        try {
            Thread.sleep(500);
        } catch (Exception e) {
            System.out.println(e);
        }
        // Gionee xiaolin 20120613 modify for CR00624109 end
        mAM.setMode(AudioManager.MODE_NORMAL);
        Log.e(TAG, "onPause set mode --> mode_normal");
    }

    class RecordThread extends Thread {

        AudioRecord mRecord;
        AudioTrack mTrack;
        int mRecBuffSize, mTrackBuffSize;
        
		public RecordThread() {
			mRecBuffSize = AudioRecord.getMinBufferSize(8000,
					AudioFormat.CHANNEL_CONFIGURATION_MONO,
					AudioFormat.ENCODING_PCM_16BIT);
			mTrackBuffSize = AudioTrack.getMinBufferSize(8000,
					AudioFormat.CHANNEL_CONFIGURATION_MONO,
					AudioFormat.ENCODING_PCM_16BIT);
			mRecord = new AudioRecord(MediaRecorder.AudioSource.MIC, 8000,
					AudioFormat.CHANNEL_CONFIGURATION_MONO,
					AudioFormat.ENCODING_PCM_16BIT, mRecBuffSize);
			mTrack = new AudioTrack(AudioManager.STREAM_MUSIC, 8000,
					AudioFormat.CHANNEL_CONFIGURATION_MONO,
					AudioFormat.ENCODING_PCM_16BIT, mTrackBuffSize,
					AudioTrack.MODE_STREAM);
		}

		public void run() {
            try {
                byte[] buffer = new byte[mRecBuffSize];
                mRecord.startRecording();
                mTrack.play();
                while (true) {
                	if (interrupted()) {
                		Log.v(TAG, "Recordthread is interrupted");
                		break;
                	}
                	
                    int bufferReadResult = mRecord.read(buffer, 0, mRecBuffSize);
                    if (bufferReadResult > 0 && bufferReadResult % 2 == 0) {
                        byte[] tmpBuf = new byte[bufferReadResult ];
                        System.arraycopy(buffer, 0, tmpBuf, 0, bufferReadResult);
                        mTrack.write(tmpBuf, 0, bufferReadResult);
                    }
                }
                buffer = null;
                // Gionee xiaolin 20120613 modify for CR00624109 start
                // Gionee xiaolin 20120613 modify for CR00624109  end
            } catch (Throwable t) {
            } finally {
            	Log.v(TAG, "mTrack and mRecord released finally here!");
            	mTrack.release();
            	mRecord.release();   
            }
        }
    }

    @Override
    public boolean dispatchKeyEvent (KeyEvent event) {
        return true;
    }
    
}
