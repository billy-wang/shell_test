/* generated by mediatek */

package com.cydroid.autommi;
import android.os.SystemProperties;
import com.android.internal.util.XmlUtils;
import com.cydroid.util.DswLog;
import android.util.Xml;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;


public final class FeatureOption{
    // Gionee zhangke 20160104 modify for CR01617603 start
    private static final String TAG = "FeatureOption";
    private static final String GN_MMI_CONFIG_FILE = "/system/etc/gnmmiConfig.xml";

    //keys start
    public static boolean GN_RW_GN_MMI_KEYTEST_MENU_SUPPORT;
    public static boolean GN_RW_GN_MMI_KEYTEST_APP_SUPPORT;
    public static boolean GN_RW_GN_MMI_KEYTEST_SEARCH_SUPPORT;
    public static boolean GN_RW_GN_MMI_KEYTEST_CAMERA_SUPPORT;
    public static boolean GN_RW_GN_MMI_KEYTEST_FOCUS_SUPPORT;
    public static boolean GN_RW_GN_MMI_KEYTEST_HALL_SUPPORT;
    public static boolean GN_RW_GN_MMI_KEYTEST_BACK_SUPPORT;
    public static boolean GN_RW_GN_MMI_KEYTEST_HOME_SUPPORT;
    //keys end

    //software version info start
    public static boolean GN_RW_GN_MMI_SW_VERSION_SUPPORT;
    public static boolean GN_RW_GN_MMI_WCDMA_SUPPORT;
    public static boolean GN_RW_GN_MMI_CDMA_SUPPORT;
    public static boolean GN_RW_GN_MMI_TDSCDMA_SUPPORT;
    public static boolean GN_RW_GN_MMI_LTETDD_SUPPORT;
    public static boolean GN_RW_GN_MMI_LTEFDD_SUPPORT;
    public static boolean GN_RW_GN_MMI_LTETDDANT_SUPPORT;
    public static boolean GN_RW_GN_MMI_GSMC2_SUPPORT;
    public static boolean GN_RW_GN_MMI_GPS_COC_SUPPORT;

    //software version info end

    private static final String GN_RW_GN_MMI_SW_VERSION = "GN_RW_GN_MMI_SW_VERSION";
    private static final String GN_RW_GN_MMI_WCDMA = "GN_RW_GN_MMI_WCDMA";
    private static final String GN_RW_GN_MMI_CDMA = "GN_RW_GN_MMI_CDMA";
    private static final String GN_RW_GN_MMI_TDSCDMA = "GN_RW_GN_MMI_TDSCDMA";
    private static final String GN_RW_GN_MMI_LTETDD = "GN_RW_GN_MMI_LTETDD";
    private static final String GN_RW_GN_MMI_LTEFDD = "GN_RW_GN_MMI_LTEFDD";
    private static final String GN_RW_GN_MMI_LTETDDANT = "GN_RW_GN_MMI_LTETDDANT";
    private static final String GN_RW_GN_MMI_KEYTEST = "GN_RW_GN_MMI_KEYTEST";
    private static final String GN_RW_GN_MMI_KEYTEST_HALL = "GN_RW_GN_MMI_KEYTEST_HALL";
    private static final String GN_RW_GN_MMI_KEYTEST_CAMERA = "GN_RW_GN_MMI_KEYTEST_CAMERA";
    private static final String GN_RW_GN_MMI_KEYTEST_SEARCH = "GN_RW_GN_MMI_KEYTEST_SEARCH";
    private static final String GN_RW_GN_MMI_KEYTEST_APP = "GN_RW_GN_MMI_KEYTEST_APP";
    private static final String GN_RW_GN_MMI_KEYTEST_MENU = "GN_RW_GN_MMI_KEYTEST_MENU";
    private static final String GN_RW_GN_MMI_KEYTEST_BACK = "GN_RW_GN_MMI_KEYTEST_BACK";
    private static final String GN_RW_GN_MMI_KEYTEST_FOCUS = "GN_RW_GN_MMI_KEYTEST_FOCUS";
    private static final String GN_RW_GN_MMI_KEYTEST_HOME = "GN_RW_GN_MMI_KEYTEST_HOME";
    private static final String GN_RW_GN_MMI_GSMC2 = "GN_RW_GN_MMI_GSMC2";
    private static final String GN_RW_GN_MMI_GPS_COC = "GN_RW_GN_MMI_GPS_COC";

    //Gionee zhangke 20160816 add for CR01747494 start
    private static final String GN_RW_GN_MMI_SENSOR_LIGHT = "GN_RW_GN_MMI_SENSOR_LIGHT";
    private static final String GN_RW_GN_MMI_SENSOR_ACC = "GN_RW_GN_MMI_SENSOR_ACC";
    private static final String GN_RW_GN_MMI_SENSOR_COMPASS = "GN_RW_GN_MMI_SENSOR_COMPASS";
    private static final String GN_RW_GN_MMI_SENSOR_GYRO = "GN_RW_GN_MMI_SENSOR_GYRO";

    public static boolean GN_RW_GN_MMI_SENSOR_LIGHT_SUPPORT;
    public static boolean GN_RW_GN_MMI_SENSOR_ACC_SUPPORT;
    public static boolean GN_RW_GN_MMI_SENSOR_COMPASS_SUPPORT;
    public static boolean GN_RW_GN_MMI_SENSOR_GYRO_SUPPORT;

    //Gionee zhangke 20160816 add for CR01747494 end
    
    public static void initMmiXml() {
        FileReader dbReader;

        final File dbConfigFile = new File(GN_MMI_CONFIG_FILE);

        try {
            dbReader = new FileReader(dbConfigFile);
        } catch (FileNotFoundException e) {
            DswLog.e(TAG, "Can't open " + GN_MMI_CONFIG_FILE);
            return;
        }
        try {
            XmlPullParser parser = Xml.newPullParser();
            parser.setInput(dbReader);
            XmlUtils.beginDocument(parser, "gnmmi");
            int eventType = parser.getEventType();
            while (eventType != XmlPullParser.END_DOCUMENT) {

                XmlUtils.nextElement(parser);
                String gnmmi = parser.getName();

                String name = parser.getAttributeValue(null, "name");
                String value = parser.getAttributeValue(null, "value");
                if (GN_RW_GN_MMI_SW_VERSION.equals(name)) {
                    GN_RW_GN_MMI_SW_VERSION_SUPPORT = Boolean.parseBoolean(value);
                } else if (GN_RW_GN_MMI_WCDMA.equals(name)) {
                    GN_RW_GN_MMI_WCDMA_SUPPORT = Boolean.parseBoolean(value);
                } else if (GN_RW_GN_MMI_CDMA.equals(name)) {
                    GN_RW_GN_MMI_CDMA_SUPPORT = Boolean.parseBoolean(value);
                } else if (GN_RW_GN_MMI_TDSCDMA.equals(name)) {
                    GN_RW_GN_MMI_TDSCDMA_SUPPORT = Boolean.parseBoolean(value);
                } else if (GN_RW_GN_MMI_LTETDD.equals(name)) {
                    GN_RW_GN_MMI_LTETDD_SUPPORT = Boolean.parseBoolean(value);
                } else if (GN_RW_GN_MMI_LTEFDD.equals(name)) {
                    GN_RW_GN_MMI_LTEFDD_SUPPORT = Boolean.parseBoolean(value);
                } else if (GN_RW_GN_MMI_LTETDDANT.equals(name)) {
                    GN_RW_GN_MMI_LTETDDANT_SUPPORT = Boolean.parseBoolean(value);
                } else if (GN_RW_GN_MMI_KEYTEST_MENU.equals(name)) {
                    GN_RW_GN_MMI_KEYTEST_MENU_SUPPORT = Boolean.parseBoolean(value);
                } else if (GN_RW_GN_MMI_KEYTEST_APP.equals(name)) {
                    GN_RW_GN_MMI_KEYTEST_APP_SUPPORT = Boolean.parseBoolean(value);
                } else if (GN_RW_GN_MMI_KEYTEST_SEARCH.equals(name)) {
                    GN_RW_GN_MMI_KEYTEST_SEARCH_SUPPORT = Boolean.parseBoolean(value);
                } else if (GN_RW_GN_MMI_KEYTEST_CAMERA.equals(name)) {
                    GN_RW_GN_MMI_KEYTEST_CAMERA_SUPPORT = Boolean.parseBoolean(value);
                } else if (GN_RW_GN_MMI_KEYTEST_FOCUS.equals(name)) {
                    GN_RW_GN_MMI_KEYTEST_FOCUS_SUPPORT = Boolean.parseBoolean(value);
                } else if (GN_RW_GN_MMI_KEYTEST_HALL.equals(name)) {
                    GN_RW_GN_MMI_KEYTEST_HALL_SUPPORT = Boolean.parseBoolean(value);
                } else if (GN_RW_GN_MMI_KEYTEST_BACK.equals(name)) {
                    GN_RW_GN_MMI_KEYTEST_BACK_SUPPORT = Boolean.parseBoolean(value);
                } else if (GN_RW_GN_MMI_KEYTEST_HOME.equals(name)) {
                    GN_RW_GN_MMI_KEYTEST_HOME_SUPPORT = Boolean.parseBoolean(value);
                } else if (GN_RW_GN_MMI_GSMC2.equals(name)) {
                    GN_RW_GN_MMI_GSMC2_SUPPORT = Boolean.parseBoolean(value);
                } else if (GN_RW_GN_MMI_GPS_COC.equals(name)) {
                    GN_RW_GN_MMI_GPS_COC_SUPPORT = Boolean.parseBoolean(value);
                } else if (GN_RW_GN_MMI_SENSOR_LIGHT.equals(name)) {
                    GN_RW_GN_MMI_SENSOR_LIGHT_SUPPORT = Boolean.parseBoolean(value);
                } else if (GN_RW_GN_MMI_SENSOR_ACC.equals(name)) {
                    GN_RW_GN_MMI_SENSOR_ACC_SUPPORT = Boolean.parseBoolean(value);
                } else if (GN_RW_GN_MMI_SENSOR_COMPASS.equals(name)) {
                    GN_RW_GN_MMI_SENSOR_COMPASS_SUPPORT = Boolean.parseBoolean(value);
                } else if (GN_RW_GN_MMI_SENSOR_GYRO.equals(name)) {
                    GN_RW_GN_MMI_SENSOR_GYRO_SUPPORT = Boolean.parseBoolean(value);
                } 
                DswLog.i(TAG, "name=" + name + ";value=" + value);
                eventType = parser.next();
            }
        } catch (XmlPullParserException e) {
            DswLog.e(TAG, "Exception  config parser " + e);
        } catch (Exception e) {
            DswLog.e(TAG, "Exception in font config parser " + e);
        } finally {
            try {
                dbReader.close();
            } catch (Exception e) {
            }
        }
    }

    // Gionee zhangke 20160104 modify for CR01617603 end
}
